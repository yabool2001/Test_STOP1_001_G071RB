
Test_STOP1_001_G071RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037e4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003928  08003928  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08003928  08003928  00013928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003930  08003930  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003930  08003930  00013930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003934  08003934  00013934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08003938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000024  0800395c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  0800395c  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001396c  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000266d  00000000  00000000  000339b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00036028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  000370d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a0b  00000000  00000000  000380a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134f4  00000000  00000000  00051aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7383  00000000  00000000  00064f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010c322  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc8  00000000  00000000  0010c374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000024 	.word	0x20000024
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003888 	.word	0x08003888

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000028 	.word	0x20000028
 8000100:	08003888 	.word	0x08003888

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	469b      	mov	fp, r3
 8000476:	d433      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000478:	465a      	mov	r2, fp
 800047a:	4653      	mov	r3, sl
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83a      	bhi.n	8000502 <__udivmoddi4+0xc2>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e078      	b.n	8000584 <__udivmoddi4+0x144>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e075      	b.n	800058a <__udivmoddi4+0x14a>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e028      	b.n	800050a <__udivmoddi4+0xca>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	2320      	movs	r3, #32
 80004e4:	1a9b      	subs	r3, r3, r2
 80004e6:	4652      	mov	r2, sl
 80004e8:	40da      	lsrs	r2, r3
 80004ea:	4641      	mov	r1, r8
 80004ec:	0013      	movs	r3, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	408a      	lsls	r2, r1
 80004f2:	0017      	movs	r7, r2
 80004f4:	4642      	mov	r2, r8
 80004f6:	431f      	orrs	r7, r3
 80004f8:	4653      	mov	r3, sl
 80004fa:	4093      	lsls	r3, r2
 80004fc:	001e      	movs	r6, r3
 80004fe:	42af      	cmp	r7, r5
 8000500:	d9c4      	bls.n	800048c <__udivmoddi4+0x4c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	4643      	mov	r3, r8
 800050c:	2b00      	cmp	r3, #0
 800050e:	d0d9      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000510:	07fb      	lsls	r3, r7, #31
 8000512:	0872      	lsrs	r2, r6, #1
 8000514:	431a      	orrs	r2, r3
 8000516:	4646      	mov	r6, r8
 8000518:	087b      	lsrs	r3, r7, #1
 800051a:	e00e      	b.n	800053a <__udivmoddi4+0xfa>
 800051c:	42ab      	cmp	r3, r5
 800051e:	d101      	bne.n	8000524 <__udivmoddi4+0xe4>
 8000520:	42a2      	cmp	r2, r4
 8000522:	d80c      	bhi.n	800053e <__udivmoddi4+0xfe>
 8000524:	1aa4      	subs	r4, r4, r2
 8000526:	419d      	sbcs	r5, r3
 8000528:	2001      	movs	r0, #1
 800052a:	1924      	adds	r4, r4, r4
 800052c:	416d      	adcs	r5, r5
 800052e:	2100      	movs	r1, #0
 8000530:	3e01      	subs	r6, #1
 8000532:	1824      	adds	r4, r4, r0
 8000534:	414d      	adcs	r5, r1
 8000536:	2e00      	cmp	r6, #0
 8000538:	d006      	beq.n	8000548 <__udivmoddi4+0x108>
 800053a:	42ab      	cmp	r3, r5
 800053c:	d9ee      	bls.n	800051c <__udivmoddi4+0xdc>
 800053e:	3e01      	subs	r6, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2e00      	cmp	r6, #0
 8000546:	d1f8      	bne.n	800053a <__udivmoddi4+0xfa>
 8000548:	9800      	ldr	r0, [sp, #0]
 800054a:	9901      	ldr	r1, [sp, #4]
 800054c:	465b      	mov	r3, fp
 800054e:	1900      	adds	r0, r0, r4
 8000550:	4169      	adcs	r1, r5
 8000552:	2b00      	cmp	r3, #0
 8000554:	db24      	blt.n	80005a0 <__udivmoddi4+0x160>
 8000556:	002b      	movs	r3, r5
 8000558:	465a      	mov	r2, fp
 800055a:	4644      	mov	r4, r8
 800055c:	40d3      	lsrs	r3, r2
 800055e:	002a      	movs	r2, r5
 8000560:	40e2      	lsrs	r2, r4
 8000562:	001c      	movs	r4, r3
 8000564:	465b      	mov	r3, fp
 8000566:	0015      	movs	r5, r2
 8000568:	2b00      	cmp	r3, #0
 800056a:	db2a      	blt.n	80005c2 <__udivmoddi4+0x182>
 800056c:	0026      	movs	r6, r4
 800056e:	409e      	lsls	r6, r3
 8000570:	0033      	movs	r3, r6
 8000572:	0026      	movs	r6, r4
 8000574:	4647      	mov	r7, r8
 8000576:	40be      	lsls	r6, r7
 8000578:	0032      	movs	r2, r6
 800057a:	1a80      	subs	r0, r0, r2
 800057c:	4199      	sbcs	r1, r3
 800057e:	9000      	str	r0, [sp, #0]
 8000580:	9101      	str	r1, [sp, #4]
 8000582:	e79f      	b.n	80004c4 <__udivmoddi4+0x84>
 8000584:	42a3      	cmp	r3, r4
 8000586:	d8bc      	bhi.n	8000502 <__udivmoddi4+0xc2>
 8000588:	e783      	b.n	8000492 <__udivmoddi4+0x52>
 800058a:	4642      	mov	r2, r8
 800058c:	2320      	movs	r3, #32
 800058e:	2100      	movs	r1, #0
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	2200      	movs	r2, #0
 8000594:	9100      	str	r1, [sp, #0]
 8000596:	9201      	str	r2, [sp, #4]
 8000598:	2201      	movs	r2, #1
 800059a:	40da      	lsrs	r2, r3
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	e786      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	4646      	mov	r6, r8
 80005aa:	409a      	lsls	r2, r3
 80005ac:	0023      	movs	r3, r4
 80005ae:	40f3      	lsrs	r3, r6
 80005b0:	4644      	mov	r4, r8
 80005b2:	4313      	orrs	r3, r2
 80005b4:	002a      	movs	r2, r5
 80005b6:	40e2      	lsrs	r2, r4
 80005b8:	001c      	movs	r4, r3
 80005ba:	465b      	mov	r3, fp
 80005bc:	0015      	movs	r5, r2
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dad4      	bge.n	800056c <__udivmoddi4+0x12c>
 80005c2:	4642      	mov	r2, r8
 80005c4:	002f      	movs	r7, r5
 80005c6:	2320      	movs	r3, #32
 80005c8:	0026      	movs	r6, r4
 80005ca:	4097      	lsls	r7, r2
 80005cc:	1a9b      	subs	r3, r3, r2
 80005ce:	40de      	lsrs	r6, r3
 80005d0:	003b      	movs	r3, r7
 80005d2:	4333      	orrs	r3, r6
 80005d4:	e7cd      	b.n	8000572 <__udivmoddi4+0x132>
 80005d6:	46c0      	nop			; (mov r8, r8)

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fb1c 	bl	8000c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f81a 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 f934 	bl	80008a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063c:	f000 f8e4 	bl	8000808 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000640:	f000 f86a 	bl	8000718 <MX_RTC_Init>
  MX_TIM6_Init();
 8000644:	f000 f8a2 	bl	800078c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin ( GREEN_GPIO_Port , GREEN_Pin , GPIO_PIN_RESET ) ;
 8000648:	23a0      	movs	r3, #160	; 0xa0
 800064a:	05db      	lsls	r3, r3, #23
 800064c:	2200      	movs	r2, #0
 800064e:	2120      	movs	r1, #32
 8000650:	0018      	movs	r0, r3
 8000652:	f000 fdd3 	bl	80011fc <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT ( &htim6 ) ;
 8000656:	4b04      	ldr	r3, [pc, #16]	; (8000668 <main+0x3c>)
 8000658:	0018      	movs	r0, r3
 800065a:	f001 ffa1 	bl	80025a0 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	  //HAL_Delay ( 2500 ) ;
	  //HAL_PWR_EnterSLEEPMode ( PWR_MAINREGULATOR_ON , PWR_SLEEPENTRY_WFI ) ;
	  //HAL_PWREx_EnableFlashPowerDown (PowerMode) ;
	  HAL_PWR_EnterSTOPMode ( PWR_MAINREGULATOR_ON , PWR_STOPENTRY_WFI ) ;
 800065e:	2101      	movs	r1, #1
 8000660:	2000      	movs	r0, #0
 8000662:	f000 fe35 	bl	80012d0 <HAL_PWR_EnterSTOPMode>
 8000666:	e7fa      	b.n	800065e <main+0x32>
 8000668:	2000006c 	.word	0x2000006c

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b093      	sub	sp, #76	; 0x4c
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	2410      	movs	r4, #16
 8000674:	193b      	adds	r3, r7, r4
 8000676:	0018      	movs	r0, r3
 8000678:	2338      	movs	r3, #56	; 0x38
 800067a:	001a      	movs	r2, r3
 800067c:	2100      	movs	r1, #0
 800067e:	f003 f8fb 	bl	8003878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000682:	003b      	movs	r3, r7
 8000684:	0018      	movs	r0, r3
 8000686:	2310      	movs	r3, #16
 8000688:	001a      	movs	r2, r3
 800068a:	2100      	movs	r1, #0
 800068c:	f003 f8f4 	bl	8003878 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	0018      	movs	r0, r3
 8000696:	f000 fe53 	bl	8001340 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800069a:	f000 fe0b 	bl	80012b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800069e:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <SystemClock_Config+0xa8>)
 80006a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <SystemClock_Config+0xa8>)
 80006a4:	2118      	movs	r1, #24
 80006a6:	438a      	bics	r2, r1
 80006a8:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	2206      	movs	r2, #6
 80006ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	2201      	movs	r2, #1
 80006b4:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2280      	movs	r2, #128	; 0x80
 80006ba:	0052      	lsls	r2, r2, #1
 80006bc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2240      	movs	r2, #64	; 0x40
 80006c8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 fe80 	bl	80013d8 <HAL_RCC_OscConfig>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006dc:	f000 f966 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	003b      	movs	r3, r7
 80006e2:	2207      	movs	r2, #7
 80006e4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e6:	003b      	movs	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	003b      	movs	r3, r7
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f2:	003b      	movs	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f8:	003b      	movs	r3, r7
 80006fa:	2100      	movs	r1, #0
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 f985 	bl	8001a0c <HAL_RCC_ClockConfig>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000706:	f000 f951 	bl	80009ac <Error_Handler>
  }
}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b013      	add	sp, #76	; 0x4c
 8000710:	bd90      	pop	{r4, r7, pc}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	40021000 	.word	0x40021000

08000718 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_RTC_Init+0x68>)
 800071e:	4a19      	ldr	r2, [pc, #100]	; (8000784 <MX_RTC_Init+0x6c>)
 8000720:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_RTC_Init+0x68>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_RTC_Init+0x68>)
 800072a:	227f      	movs	r2, #127	; 0x7f
 800072c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_RTC_Init+0x68>)
 8000730:	22ff      	movs	r2, #255	; 0xff
 8000732:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_RTC_Init+0x68>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_RTC_Init+0x68>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_RTC_Init+0x68>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_RTC_Init+0x68>)
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	05d2      	lsls	r2, r2, #23
 800074c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_RTC_Init+0x68>)
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_RTC_Init+0x68>)
 8000756:	0018      	movs	r0, r3
 8000758:	f001 fcba 	bl	80020d0 <HAL_RTC_Init>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 f924 	bl	80009ac <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 10246, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000764:	4908      	ldr	r1, [pc, #32]	; (8000788 <MX_RTC_Init+0x70>)
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_RTC_Init+0x68>)
 8000768:	2200      	movs	r2, #0
 800076a:	0018      	movs	r0, r3
 800076c:	f001 fe00 	bl	8002370 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000774:	f000 f91a 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	20000040 	.word	0x20000040
 8000784:	40002800 	.word	0x40002800
 8000788:	00002806 	.word	0x00002806

0800078c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	0018      	movs	r0, r3
 8000796:	230c      	movs	r3, #12
 8000798:	001a      	movs	r2, r3
 800079a:	2100      	movs	r1, #0
 800079c:	f003 f86c 	bl	8003878 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_TIM6_Init+0x6c>)
 80007a2:	4a16      	ldr	r2, [pc, #88]	; (80007fc <MX_TIM6_Init+0x70>)
 80007a4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_TIM6_Init+0x6c>)
 80007a8:	4a15      	ldr	r2, [pc, #84]	; (8000800 <MX_TIM6_Init+0x74>)
 80007aa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_TIM6_Init+0x6c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000-1;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_TIM6_Init+0x6c>)
 80007b4:	4a13      	ldr	r2, [pc, #76]	; (8000804 <MX_TIM6_Init+0x78>)
 80007b6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_TIM6_Init+0x6c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_TIM6_Init+0x6c>)
 80007c0:	0018      	movs	r0, r3
 80007c2:	f001 fe95 	bl	80024f0 <HAL_TIM_Base_Init>
 80007c6:	1e03      	subs	r3, r0, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80007ca:	f000 f8ef 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007da:	1d3a      	adds	r2, r7, #4
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_TIM6_Init+0x6c>)
 80007de:	0011      	movs	r1, r2
 80007e0:	0018      	movs	r0, r3
 80007e2:	f002 f90b 	bl	80029fc <HAL_TIMEx_MasterConfigSynchronization>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80007ea:	f000 f8df 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b004      	add	sp, #16
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	2000006c 	.word	0x2000006c
 80007fc:	40001000 	.word	0x40001000
 8000800:	00003e7f 	.word	0x00003e7f
 8000804:	000007cf 	.word	0x000007cf

08000808 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800080c:	4b23      	ldr	r3, [pc, #140]	; (800089c <MX_USART2_UART_Init+0x94>)
 800080e:	4a24      	ldr	r2, [pc, #144]	; (80008a0 <MX_USART2_UART_Init+0x98>)
 8000810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000812:	4b22      	ldr	r3, [pc, #136]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000814:	22e1      	movs	r2, #225	; 0xe1
 8000816:	0252      	lsls	r2, r2, #9
 8000818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b20      	ldr	r3, [pc, #128]	; (800089c <MX_USART2_UART_Init+0x94>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000826:	4b1d      	ldr	r3, [pc, #116]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_USART2_UART_Init+0x94>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_USART2_UART_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_USART2_UART_Init+0x94>)
 800084c:	2200      	movs	r2, #0
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000852:	0018      	movs	r0, r3
 8000854:	f002 f958 	bl	8002b08 <HAL_UART_Init>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800085c:	f000 f8a6 	bl	80009ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000862:	2100      	movs	r1, #0
 8000864:	0018      	movs	r0, r3
 8000866:	f002 ff03 	bl	8003670 <HAL_UARTEx_SetTxFifoThreshold>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800086e:	f000 f89d 	bl	80009ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000874:	2100      	movs	r1, #0
 8000876:	0018      	movs	r0, r3
 8000878:	f002 ff3a 	bl	80036f0 <HAL_UARTEx_SetRxFifoThreshold>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d001      	beq.n	8000884 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000880:	f000 f894 	bl	80009ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000886:	0018      	movs	r0, r3
 8000888:	f002 feb8 	bl	80035fc <HAL_UARTEx_DisableFifoMode>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000890:	f000 f88c 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	200000b8 	.word	0x200000b8
 80008a0:	40004400 	.word	0x40004400

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b089      	sub	sp, #36	; 0x24
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	240c      	movs	r4, #12
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	0018      	movs	r0, r3
 80008b0:	2314      	movs	r3, #20
 80008b2:	001a      	movs	r2, r3
 80008b4:	2100      	movs	r1, #0
 80008b6:	f002 ffdf 	bl	8003878 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008be:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008c0:	2104      	movs	r1, #4
 80008c2:	430a      	orrs	r2, r1
 80008c4:	635a      	str	r2, [r3, #52]	; 0x34
 80008c6:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ca:	2204      	movs	r2, #4
 80008cc:	4013      	ands	r3, r2
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008d2:	4b28      	ldr	r3, [pc, #160]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008d6:	4b27      	ldr	r3, [pc, #156]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008d8:	2120      	movs	r1, #32
 80008da:	430a      	orrs	r2, r1
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008e2:	2220      	movs	r2, #32
 80008e4:	4013      	ands	r3, r2
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008f0:	2101      	movs	r1, #1
 80008f2:	430a      	orrs	r2, r1
 80008f4:	635a      	str	r2, [r3, #52]	; 0x34
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008fa:	2201      	movs	r2, #1
 80008fc:	4013      	ands	r3, r2
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8000902:	23a0      	movs	r3, #160	; 0xa0
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	2200      	movs	r2, #0
 8000908:	2120      	movs	r1, #32
 800090a:	0018      	movs	r0, r3
 800090c:	f000 fc76 	bl	80011fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000910:	193b      	adds	r3, r7, r4
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	0192      	lsls	r2, r2, #6
 8000916:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000918:	193b      	adds	r3, r7, r4
 800091a:	2288      	movs	r2, #136	; 0x88
 800091c:	0352      	lsls	r2, r2, #13
 800091e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	193b      	adds	r3, r7, r4
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000926:	193b      	adds	r3, r7, r4
 8000928:	4a13      	ldr	r2, [pc, #76]	; (8000978 <MX_GPIO_Init+0xd4>)
 800092a:	0019      	movs	r1, r3
 800092c:	0010      	movs	r0, r2
 800092e:	f000 fb01 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8000932:	0021      	movs	r1, r4
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2220      	movs	r2, #32
 8000938:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2201      	movs	r2, #1
 800093e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2202      	movs	r2, #2
 800094a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 800094c:	187a      	adds	r2, r7, r1
 800094e:	23a0      	movs	r3, #160	; 0xa0
 8000950:	05db      	lsls	r3, r3, #23
 8000952:	0011      	movs	r1, r2
 8000954:	0018      	movs	r0, r3
 8000956:	f000 faed 	bl	8000f34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	2007      	movs	r0, #7
 8000960:	f000 fab6 	bl	8000ed0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000964:	2007      	movs	r0, #7
 8000966:	f000 fac8 	bl	8000efa <HAL_NVIC_EnableIRQ>

}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b009      	add	sp, #36	; 0x24
 8000970:	bd90      	pop	{r4, r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	40021000 	.word	0x40021000
 8000978:	50000800 	.word	0x50000800

0800097c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin ( GREEN_GPIO_Port , GREEN_Pin ) ;
	HAL_UART_Transmit ( &huart2 , m , strlen ( (char *)m ) , UART_TX_TIMEOUT ) ;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000986:	0018      	movs	r0, r3
 8000988:	f7ff fbbc 	bl	8000104 <strlen>
 800098c:	0003      	movs	r3, r0
 800098e:	b29a      	uxth	r2, r3
 8000990:	4904      	ldr	r1, [pc, #16]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000994:	2364      	movs	r3, #100	; 0x64
 8000996:	f002 f90d 	bl	8002bb4 <HAL_UART_Transmit>
}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b002      	add	sp, #8
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	20000000 	.word	0x20000000
 80009a8:	200000b8 	.word	0x200000b8

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_MspInit+0x44>)
 80009c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_MspInit+0x44>)
 80009c4:	2101      	movs	r1, #1
 80009c6:	430a      	orrs	r2, r1
 80009c8:	641a      	str	r2, [r3, #64]	; 0x40
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <HAL_MspInit+0x44>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	2201      	movs	r2, #1
 80009d0:	4013      	ands	r3, r2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_MspInit+0x44>)
 80009d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <HAL_MspInit+0x44>)
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	0549      	lsls	r1, r1, #21
 80009e0:	430a      	orrs	r2, r1
 80009e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <HAL_MspInit+0x44>)
 80009e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	055b      	lsls	r3, r3, #21
 80009ec:	4013      	ands	r3, r2
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b002      	add	sp, #8
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b091      	sub	sp, #68	; 0x44
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a08:	240c      	movs	r4, #12
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	2334      	movs	r3, #52	; 0x34
 8000a10:	001a      	movs	r2, r3
 8000a12:	2100      	movs	r1, #0
 8000a14:	f002 ff30 	bl	8003878 <memset>
  if(hrtc->Instance==RTC)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a19      	ldr	r2, [pc, #100]	; (8000a84 <HAL_RTC_MspInit+0x84>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d12c      	bne.n	8000a7c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	0292      	lsls	r2, r2, #10
 8000a28:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	2280      	movs	r2, #128	; 0x80
 8000a2e:	0052      	lsls	r2, r2, #1
 8000a30:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	0018      	movs	r0, r3
 8000a36:	f001 f993 	bl	8001d60 <HAL_RCCEx_PeriphCLKConfig>
 8000a3a:	1e03      	subs	r3, r0, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000a3e:	f7ff ffb5 	bl	80009ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <HAL_RTC_MspInit+0x88>)
 8000a44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_RTC_MspInit+0x88>)
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	0209      	lsls	r1, r1, #8
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000a50:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <HAL_RTC_MspInit+0x88>)
 8000a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_RTC_MspInit+0x88>)
 8000a56:	2180      	movs	r1, #128	; 0x80
 8000a58:	00c9      	lsls	r1, r1, #3
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <HAL_RTC_MspInit+0x88>)
 8000a60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a62:	2380      	movs	r3, #128	; 0x80
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	4013      	ands	r3, r2
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2002      	movs	r0, #2
 8000a72:	f000 fa2d 	bl	8000ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000a76:	2002      	movs	r0, #2
 8000a78:	f000 fa3f 	bl	8000efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b011      	add	sp, #68	; 0x44
 8000a82:	bd90      	pop	{r4, r7, pc}
 8000a84:	40002800 	.word	0x40002800
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <HAL_TIM_Base_MspInit+0x44>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d113      	bne.n	8000ac6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <HAL_TIM_Base_MspInit+0x48>)
 8000aa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <HAL_TIM_Base_MspInit+0x48>)
 8000aa4:	2110      	movs	r1, #16
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <HAL_TIM_Base_MspInit+0x48>)
 8000aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aae:	2210      	movs	r2, #16
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2011      	movs	r0, #17
 8000abc:	f000 fa08 	bl	8000ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000ac0:	2011      	movs	r0, #17
 8000ac2:	f000 fa1a 	bl	8000efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b004      	add	sp, #16
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	40001000 	.word	0x40001000
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b097      	sub	sp, #92	; 0x5c
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	2344      	movs	r3, #68	; 0x44
 8000ae2:	18fb      	adds	r3, r7, r3
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	2314      	movs	r3, #20
 8000ae8:	001a      	movs	r2, r3
 8000aea:	2100      	movs	r1, #0
 8000aec:	f002 fec4 	bl	8003878 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af0:	2410      	movs	r4, #16
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	0018      	movs	r0, r3
 8000af6:	2334      	movs	r3, #52	; 0x34
 8000af8:	001a      	movs	r2, r3
 8000afa:	2100      	movs	r1, #0
 8000afc:	f002 febc 	bl	8003878 <memset>
  if(huart->Instance==USART2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a22      	ldr	r2, [pc, #136]	; (8000b90 <HAL_UART_MspInit+0xb8>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d13e      	bne.n	8000b88 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b10:	193b      	adds	r3, r7, r4
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f001 f921 	bl	8001d60 <HAL_RCCEx_PeriphCLKConfig>
 8000b1e:	1e03      	subs	r3, r0, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b22:	f7ff ff43 	bl	80009ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b26:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <HAL_UART_MspInit+0xbc>)
 8000b28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <HAL_UART_MspInit+0xbc>)
 8000b2c:	2180      	movs	r1, #128	; 0x80
 8000b2e:	0289      	lsls	r1, r1, #10
 8000b30:	430a      	orrs	r2, r1
 8000b32:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <HAL_UART_MspInit+0xbc>)
 8000b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	029b      	lsls	r3, r3, #10
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <HAL_UART_MspInit+0xbc>)
 8000b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <HAL_UART_MspInit+0xbc>)
 8000b48:	2101      	movs	r1, #1
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	635a      	str	r2, [r3, #52]	; 0x34
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_UART_MspInit+0xbc>)
 8000b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b52:	2201      	movs	r2, #1
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_STLK_Pin|USART2_RX_STLK_Pin;
 8000b5a:	2144      	movs	r1, #68	; 0x44
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	220c      	movs	r2, #12
 8000b60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2202      	movs	r2, #2
 8000b66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	2201      	movs	r2, #1
 8000b78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	187a      	adds	r2, r7, r1
 8000b7c:	23a0      	movs	r3, #160	; 0xa0
 8000b7e:	05db      	lsls	r3, r3, #23
 8000b80:	0011      	movs	r1, r2
 8000b82:	0018      	movs	r0, r3
 8000b84:	f000 f9d6 	bl	8000f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b017      	add	sp, #92	; 0x5c
 8000b8e:	bd90      	pop	{r4, r7, pc}
 8000b90:	40004400 	.word	0x40004400
 8000b94:	40021000 	.word	0x40021000

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <NMI_Handler+0x4>

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 f8c0 	bl	8000d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <RTC_TAMP_IRQHandler+0x14>)
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f001 fc68 	bl	80024a4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	20000040 	.word	0x20000040

08000be0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	019b      	lsls	r3, r3, #6
 8000be8:	0018      	movs	r0, r3
 8000bea:	f000 fb25 	bl	8001238 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f001 fd2c 	bl	8002658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	2000006c 	.word	0x2000006c

08000c0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c1c:	f7ff fff6 	bl	8000c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	; (8000c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <LoopForever+0xe>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	; (8000c64 <LoopForever+0x16>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c46:	f002 fdf3 	bl	8003830 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c4a:	f7ff fcef 	bl	800062c <main>

08000c4e <LoopForever>:

LoopForever:
  b LoopForever
 8000c4e:	e7fe      	b.n	8000c4e <LoopForever>
  ldr   r0, =_estack
 8000c50:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000c5c:	08003938 	.word	0x08003938
  ldr r2, =_sbss
 8000c60:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000c64:	20000150 	.word	0x20000150

08000c68 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_COMP_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <HAL_Init+0x3c>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_Init+0x3c>)
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	0049      	lsls	r1, r1, #1
 8000c82:	430a      	orrs	r2, r1
 8000c84:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c86:	2000      	movs	r0, #0
 8000c88:	f000 f810 	bl	8000cac <HAL_InitTick>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d003      	beq.n	8000c98 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
 8000c96:	e001      	b.n	8000c9c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c98:	f7ff fe8e 	bl	80009b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	781b      	ldrb	r3, [r3, #0]
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b002      	add	sp, #8
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40022000 	.word	0x40022000

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_InitTick+0x88>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d02b      	beq.n	8000d1c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <HAL_InitTick+0x8c>)
 8000cc6:	681c      	ldr	r4, [r3, #0]
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <HAL_InitTick+0x88>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	0019      	movs	r1, r3
 8000cce:	23fa      	movs	r3, #250	; 0xfa
 8000cd0:	0098      	lsls	r0, r3, #2
 8000cd2:	f7ff fa1f 	bl	8000114 <__udivsi3>
 8000cd6:	0003      	movs	r3, r0
 8000cd8:	0019      	movs	r1, r3
 8000cda:	0020      	movs	r0, r4
 8000cdc:	f7ff fa1a 	bl	8000114 <__udivsi3>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f000 f919 	bl	8000f1a <HAL_SYSTICK_Config>
 8000ce8:	1e03      	subs	r3, r0, #0
 8000cea:	d112      	bne.n	8000d12 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d80a      	bhi.n	8000d08 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	425b      	negs	r3, r3
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 f8e8 	bl	8000ed0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_InitTick+0x90>)
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	e00d      	b.n	8000d24 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d08:	230f      	movs	r3, #15
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	e008      	b.n	8000d24 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d12:	230f      	movs	r3, #15
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e003      	b.n	8000d24 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	18fb      	adds	r3, r7, r3
 8000d20:	2201      	movs	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d24:	230f      	movs	r3, #15
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	781b      	ldrb	r3, [r3, #0]
}
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b005      	add	sp, #20
 8000d30:	bd90      	pop	{r4, r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	20000020 	.word	0x20000020
 8000d38:	20000018 	.word	0x20000018
 8000d3c:	2000001c 	.word	0x2000001c

08000d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_IncTick+0x1c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	001a      	movs	r2, r3
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_IncTick+0x20>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	18d2      	adds	r2, r2, r3
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <HAL_IncTick+0x20>)
 8000d52:	601a      	str	r2, [r3, #0]
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	20000020 	.word	0x20000020
 8000d60:	2000014c 	.word	0x2000014c

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <HAL_GetTick+0x10>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	2000014c 	.word	0x2000014c

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	0002      	movs	r2, r0
 8000d80:	1dfb      	adds	r3, r7, #7
 8000d82:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b7f      	cmp	r3, #127	; 0x7f
 8000d8a:	d809      	bhi.n	8000da0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	001a      	movs	r2, r3
 8000d92:	231f      	movs	r3, #31
 8000d94:	401a      	ands	r2, r3
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_EnableIRQ+0x30>)
 8000d98:	2101      	movs	r1, #1
 8000d9a:	4091      	lsls	r1, r2
 8000d9c:	000a      	movs	r2, r1
 8000d9e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b002      	add	sp, #8
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	e000e100 	.word	0xe000e100

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	0002      	movs	r2, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8000dc0:	d828      	bhi.n	8000e14 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc2:	4a2f      	ldr	r2, [pc, #188]	; (8000e80 <__NVIC_SetPriority+0xd4>)
 8000dc4:	1dfb      	adds	r3, r7, #7
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	089b      	lsrs	r3, r3, #2
 8000dcc:	33c0      	adds	r3, #192	; 0xc0
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	589b      	ldr	r3, [r3, r2]
 8000dd2:	1dfa      	adds	r2, r7, #7
 8000dd4:	7812      	ldrb	r2, [r2, #0]
 8000dd6:	0011      	movs	r1, r2
 8000dd8:	2203      	movs	r2, #3
 8000dda:	400a      	ands	r2, r1
 8000ddc:	00d2      	lsls	r2, r2, #3
 8000dde:	21ff      	movs	r1, #255	; 0xff
 8000de0:	4091      	lsls	r1, r2
 8000de2:	000a      	movs	r2, r1
 8000de4:	43d2      	mvns	r2, r2
 8000de6:	401a      	ands	r2, r3
 8000de8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	019b      	lsls	r3, r3, #6
 8000dee:	22ff      	movs	r2, #255	; 0xff
 8000df0:	401a      	ands	r2, r3
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	0018      	movs	r0, r3
 8000df8:	2303      	movs	r3, #3
 8000dfa:	4003      	ands	r3, r0
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e00:	481f      	ldr	r0, [pc, #124]	; (8000e80 <__NVIC_SetPriority+0xd4>)
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	b25b      	sxtb	r3, r3
 8000e08:	089b      	lsrs	r3, r3, #2
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	33c0      	adds	r3, #192	; 0xc0
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e12:	e031      	b.n	8000e78 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e14:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <__NVIC_SetPriority+0xd8>)
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	400b      	ands	r3, r1
 8000e20:	3b08      	subs	r3, #8
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	3306      	adds	r3, #6
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	18d3      	adds	r3, r2, r3
 8000e2a:	3304      	adds	r3, #4
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	1dfa      	adds	r2, r7, #7
 8000e30:	7812      	ldrb	r2, [r2, #0]
 8000e32:	0011      	movs	r1, r2
 8000e34:	2203      	movs	r2, #3
 8000e36:	400a      	ands	r2, r1
 8000e38:	00d2      	lsls	r2, r2, #3
 8000e3a:	21ff      	movs	r1, #255	; 0xff
 8000e3c:	4091      	lsls	r1, r2
 8000e3e:	000a      	movs	r2, r1
 8000e40:	43d2      	mvns	r2, r2
 8000e42:	401a      	ands	r2, r3
 8000e44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	019b      	lsls	r3, r3, #6
 8000e4a:	22ff      	movs	r2, #255	; 0xff
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	0018      	movs	r0, r3
 8000e54:	2303      	movs	r3, #3
 8000e56:	4003      	ands	r3, r0
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e5c:	4809      	ldr	r0, [pc, #36]	; (8000e84 <__NVIC_SetPriority+0xd8>)
 8000e5e:	1dfb      	adds	r3, r7, #7
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	001c      	movs	r4, r3
 8000e64:	230f      	movs	r3, #15
 8000e66:	4023      	ands	r3, r4
 8000e68:	3b08      	subs	r3, #8
 8000e6a:	089b      	lsrs	r3, r3, #2
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	3306      	adds	r3, #6
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	18c3      	adds	r3, r0, r3
 8000e74:	3304      	adds	r3, #4
 8000e76:	601a      	str	r2, [r3, #0]
}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b003      	add	sp, #12
 8000e7e:	bd90      	pop	{r4, r7, pc}
 8000e80:	e000e100 	.word	0xe000e100
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	1e5a      	subs	r2, r3, #1
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	045b      	lsls	r3, r3, #17
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d301      	bcc.n	8000ea0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e010      	b.n	8000ec2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <SysTick_Config+0x44>)
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	3a01      	subs	r2, #1
 8000ea6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	425b      	negs	r3, r3
 8000eac:	2103      	movs	r1, #3
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f7ff ff7c 	bl	8000dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <SysTick_Config+0x44>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SysTick_Config+0x44>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b002      	add	sp, #8
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	210f      	movs	r1, #15
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	1c02      	adds	r2, r0, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	0011      	movs	r1, r2
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff ff5d 	bl	8000dac <__NVIC_SetPriority>
}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b004      	add	sp, #16
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	0002      	movs	r2, r0
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f7ff ff33 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b002      	add	sp, #8
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	0018      	movs	r0, r3
 8000f26:	f7ff ffaf 	bl	8000e88 <SysTick_Config>
 8000f2a:	0003      	movs	r3, r0
}
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b002      	add	sp, #8
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f42:	e147      	b.n	80011d4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2101      	movs	r1, #1
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	000a      	movs	r2, r1
 8000f50:	4013      	ands	r3, r2
 8000f52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d100      	bne.n	8000f5c <HAL_GPIO_Init+0x28>
 8000f5a:	e138      	b.n	80011ce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2203      	movs	r2, #3
 8000f62:	4013      	ands	r3, r2
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d005      	beq.n	8000f74 <HAL_GPIO_Init+0x40>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	4013      	ands	r3, r2
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d130      	bne.n	8000fd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	409a      	lsls	r2, r3
 8000f82:	0013      	movs	r3, r2
 8000f84:	43da      	mvns	r2, r3
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	409a      	lsls	r2, r3
 8000f96:	0013      	movs	r3, r2
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000faa:	2201      	movs	r2, #1
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
 8000fb0:	0013      	movs	r3, r2
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	091b      	lsrs	r3, r3, #4
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	409a      	lsls	r2, r3
 8000fc8:	0013      	movs	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2203      	movs	r2, #3
 8000fdc:	4013      	ands	r3, r2
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	d017      	beq.n	8001012 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2203      	movs	r2, #3
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	409a      	lsls	r2, r3
 8001004:	0013      	movs	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2203      	movs	r2, #3
 8001018:	4013      	ands	r3, r2
 800101a:	2b02      	cmp	r3, #2
 800101c:	d123      	bne.n	8001066 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	08da      	lsrs	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3208      	adds	r2, #8
 8001026:	0092      	lsls	r2, r2, #2
 8001028:	58d3      	ldr	r3, [r2, r3]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	2207      	movs	r2, #7
 8001030:	4013      	ands	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	220f      	movs	r2, #15
 8001036:	409a      	lsls	r2, r3
 8001038:	0013      	movs	r3, r2
 800103a:	43da      	mvns	r2, r3
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	691a      	ldr	r2, [r3, #16]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	2107      	movs	r1, #7
 800104a:	400b      	ands	r3, r1
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	409a      	lsls	r2, r3
 8001050:	0013      	movs	r3, r2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	08da      	lsrs	r2, r3, #3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3208      	adds	r2, #8
 8001060:	0092      	lsls	r2, r2, #2
 8001062:	6939      	ldr	r1, [r7, #16]
 8001064:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2203      	movs	r2, #3
 8001072:	409a      	lsls	r2, r3
 8001074:	0013      	movs	r3, r2
 8001076:	43da      	mvns	r2, r3
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2203      	movs	r2, #3
 8001084:	401a      	ands	r2, r3
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	409a      	lsls	r2, r3
 800108c:	0013      	movs	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	23c0      	movs	r3, #192	; 0xc0
 80010a0:	029b      	lsls	r3, r3, #10
 80010a2:	4013      	ands	r3, r2
 80010a4:	d100      	bne.n	80010a8 <HAL_GPIO_Init+0x174>
 80010a6:	e092      	b.n	80011ce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80010a8:	4a50      	ldr	r2, [pc, #320]	; (80011ec <HAL_GPIO_Init+0x2b8>)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	3318      	adds	r3, #24
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	589b      	ldr	r3, [r3, r2]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	2203      	movs	r2, #3
 80010ba:	4013      	ands	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	220f      	movs	r2, #15
 80010c0:	409a      	lsls	r2, r3
 80010c2:	0013      	movs	r3, r2
 80010c4:	43da      	mvns	r2, r3
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	23a0      	movs	r3, #160	; 0xa0
 80010d0:	05db      	lsls	r3, r3, #23
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0x1ca>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a45      	ldr	r2, [pc, #276]	; (80011f0 <HAL_GPIO_Init+0x2bc>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d00d      	beq.n	80010fa <HAL_GPIO_Init+0x1c6>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a44      	ldr	r2, [pc, #272]	; (80011f4 <HAL_GPIO_Init+0x2c0>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d007      	beq.n	80010f6 <HAL_GPIO_Init+0x1c2>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a43      	ldr	r2, [pc, #268]	; (80011f8 <HAL_GPIO_Init+0x2c4>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_GPIO_Init+0x1be>
 80010ee:	2303      	movs	r3, #3
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x1cc>
 80010f2:	2305      	movs	r3, #5
 80010f4:	e004      	b.n	8001100 <HAL_GPIO_Init+0x1cc>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_Init+0x1cc>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <HAL_GPIO_Init+0x1cc>
 80010fe:	2300      	movs	r3, #0
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	2103      	movs	r1, #3
 8001104:	400a      	ands	r2, r1
 8001106:	00d2      	lsls	r2, r2, #3
 8001108:	4093      	lsls	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001110:	4936      	ldr	r1, [pc, #216]	; (80011ec <HAL_GPIO_Init+0x2b8>)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3318      	adds	r3, #24
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800111e:	4b33      	ldr	r3, [pc, #204]	; (80011ec <HAL_GPIO_Init+0x2b8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	43da      	mvns	r2, r3
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	035b      	lsls	r3, r3, #13
 8001136:	4013      	ands	r3, r2
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001142:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <HAL_GPIO_Init+0x2b8>)
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001148:	4b28      	ldr	r3, [pc, #160]	; (80011ec <HAL_GPIO_Init+0x2b8>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	43da      	mvns	r2, r3
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	039b      	lsls	r3, r3, #14
 8001160:	4013      	ands	r3, r2
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <HAL_GPIO_Init+0x2b8>)
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001172:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <HAL_GPIO_Init+0x2b8>)
 8001174:	2384      	movs	r3, #132	; 0x84
 8001176:	58d3      	ldr	r3, [r2, r3]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	43da      	mvns	r2, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	029b      	lsls	r3, r3, #10
 800118c:	4013      	ands	r3, r2
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001198:	4914      	ldr	r1, [pc, #80]	; (80011ec <HAL_GPIO_Init+0x2b8>)
 800119a:	2284      	movs	r2, #132	; 0x84
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80011a0:	4a12      	ldr	r2, [pc, #72]	; (80011ec <HAL_GPIO_Init+0x2b8>)
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	58d3      	ldr	r3, [r2, r3]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	43da      	mvns	r2, r3
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	025b      	lsls	r3, r3, #9
 80011ba:	4013      	ands	r3, r2
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011c6:	4909      	ldr	r1, [pc, #36]	; (80011ec <HAL_GPIO_Init+0x2b8>)
 80011c8:	2280      	movs	r2, #128	; 0x80
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	3301      	adds	r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	40da      	lsrs	r2, r3
 80011dc:	1e13      	subs	r3, r2, #0
 80011de:	d000      	beq.n	80011e2 <HAL_GPIO_Init+0x2ae>
 80011e0:	e6b0      	b.n	8000f44 <HAL_GPIO_Init+0x10>
  }
}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b006      	add	sp, #24
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40021800 	.word	0x40021800
 80011f0:	50000400 	.word	0x50000400
 80011f4:	50000800 	.word	0x50000800
 80011f8:	50000c00 	.word	0x50000c00

080011fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	0008      	movs	r0, r1
 8001206:	0011      	movs	r1, r2
 8001208:	1cbb      	adds	r3, r7, #2
 800120a:	1c02      	adds	r2, r0, #0
 800120c:	801a      	strh	r2, [r3, #0]
 800120e:	1c7b      	adds	r3, r7, #1
 8001210:	1c0a      	adds	r2, r1, #0
 8001212:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001214:	1c7b      	adds	r3, r7, #1
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d004      	beq.n	8001226 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800121c:	1cbb      	adds	r3, r7, #2
 800121e:	881a      	ldrh	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001224:	e003      	b.n	800122e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001226:	1cbb      	adds	r3, r7, #2
 8001228:	881a      	ldrh	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	b002      	add	sp, #8
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	0002      	movs	r2, r0
 8001240:	1dbb      	adds	r3, r7, #6
 8001242:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001244:	4b10      	ldr	r3, [pc, #64]	; (8001288 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	1dba      	adds	r2, r7, #6
 800124a:	8812      	ldrh	r2, [r2, #0]
 800124c:	4013      	ands	r3, r2
 800124e:	d008      	beq.n	8001262 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001252:	1dba      	adds	r2, r7, #6
 8001254:	8812      	ldrh	r2, [r2, #0]
 8001256:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001258:	1dbb      	adds	r3, r7, #6
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	0018      	movs	r0, r3
 800125e:	f000 f815 	bl	800128c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	1dba      	adds	r2, r7, #6
 8001268:	8812      	ldrh	r2, [r2, #0]
 800126a:	4013      	ands	r3, r2
 800126c:	d008      	beq.n	8001280 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001270:	1dba      	adds	r2, r7, #6
 8001272:	8812      	ldrh	r2, [r2, #0]
 8001274:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001276:	1dbb      	adds	r3, r7, #6
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	0018      	movs	r0, r3
 800127c:	f000 f810 	bl	80012a0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001280:	46c0      	nop			; (mov r8, r8)
 8001282:	46bd      	mov	sp, r7
 8001284:	b002      	add	sp, #8
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40021800 	.word	0x40021800

0800128c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	0002      	movs	r2, r0
 8001294:	1dbb      	adds	r3, r7, #6
 8001296:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001298:	46c0      	nop			; (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	b002      	add	sp, #8
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	0002      	movs	r2, r0
 80012a8:	1dbb      	adds	r3, r7, #6
 80012aa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b002      	add	sp, #8
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80012be:	2180      	movs	r1, #128	; 0x80
 80012c0:	0049      	lsls	r1, r1, #1
 80012c2:	430a      	orrs	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]
}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40007000 	.word	0x40007000

080012d0 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	000a      	movs	r2, r1
 80012da:	1cfb      	adds	r3, r7, #3
 80012dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d009      	beq.n	80012f8 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_PWR_EnterSTOPMode+0x68>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2207      	movs	r2, #7
 80012ea:	4393      	bics	r3, r2
 80012ec:	001a      	movs	r2, r3
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_PWR_EnterSTOPMode+0x68>)
 80012f0:	2101      	movs	r1, #1
 80012f2:	430a      	orrs	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	e005      	b.n	8001304 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <HAL_PWR_EnterSTOPMode+0x68>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_PWR_EnterSTOPMode+0x68>)
 80012fe:	2107      	movs	r1, #7
 8001300:	438a      	bics	r2, r1
 8001302:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <HAL_PWR_EnterSTOPMode+0x6c>)
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <HAL_PWR_EnterSTOPMode+0x6c>)
 800130a:	2104      	movs	r1, #4
 800130c:	430a      	orrs	r2, r1
 800130e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8001310:	1cfb      	adds	r3, r7, #3
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d101      	bne.n	800131c <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001318:	bf30      	wfi
 800131a:	e002      	b.n	8001322 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800131c:	bf40      	sev
    __WFE();
 800131e:	bf20      	wfe
    __WFE();
 8001320:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_PWR_EnterSTOPMode+0x6c>)
 8001324:	691a      	ldr	r2, [r3, #16]
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_PWR_EnterSTOPMode+0x6c>)
 8001328:	2104      	movs	r1, #4
 800132a:	438a      	bics	r2, r1
 800132c:	611a      	str	r2, [r3, #16]
}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	46bd      	mov	sp, r7
 8001332:	b002      	add	sp, #8
 8001334:	bd80      	pop	{r7, pc}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	40007000 	.word	0x40007000
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a19      	ldr	r2, [pc, #100]	; (80013b4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800134e:	4013      	ands	r3, r2
 8001350:	0019      	movs	r1, r3
 8001352:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	430a      	orrs	r2, r1
 8001358:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	429a      	cmp	r2, r3
 8001362:	d11f      	bne.n	80013a4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	0013      	movs	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	189b      	adds	r3, r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4912      	ldr	r1, [pc, #72]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001372:	0018      	movs	r0, r3
 8001374:	f7fe fece 	bl	8000114 <__udivsi3>
 8001378:	0003      	movs	r3, r0
 800137a:	3301      	adds	r3, #1
 800137c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800137e:	e008      	b.n	8001392 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3b01      	subs	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	e001      	b.n	8001392 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e009      	b.n	80013a6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001392:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001394:	695a      	ldr	r2, [r3, #20]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	401a      	ands	r2, r3
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d0ed      	beq.n	8001380 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	0018      	movs	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b004      	add	sp, #16
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	40007000 	.word	0x40007000
 80013b4:	fffff9ff 	.word	0xfffff9ff
 80013b8:	20000018 	.word	0x20000018
 80013bc:	000f4240 	.word	0x000f4240

080013c0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	23e0      	movs	r3, #224	; 0xe0
 80013ca:	01db      	lsls	r3, r3, #7
 80013cc:	4013      	ands	r3, r2
}
 80013ce:	0018      	movs	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40021000 	.word	0x40021000

080013d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e2fe      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2201      	movs	r2, #1
 80013f0:	4013      	ands	r3, r2
 80013f2:	d100      	bne.n	80013f6 <HAL_RCC_OscConfig+0x1e>
 80013f4:	e07c      	b.n	80014f0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013f6:	4bc3      	ldr	r3, [pc, #780]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2238      	movs	r2, #56	; 0x38
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001400:	4bc0      	ldr	r3, [pc, #768]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2203      	movs	r2, #3
 8001406:	4013      	ands	r3, r2
 8001408:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	2b10      	cmp	r3, #16
 800140e:	d102      	bne.n	8001416 <HAL_RCC_OscConfig+0x3e>
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d002      	beq.n	800141c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	2b08      	cmp	r3, #8
 800141a:	d10b      	bne.n	8001434 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141c:	4bb9      	ldr	r3, [pc, #740]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	029b      	lsls	r3, r3, #10
 8001424:	4013      	ands	r3, r2
 8001426:	d062      	beq.n	80014ee <HAL_RCC_OscConfig+0x116>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d15e      	bne.n	80014ee <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e2d9      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	025b      	lsls	r3, r3, #9
 800143c:	429a      	cmp	r2, r3
 800143e:	d107      	bne.n	8001450 <HAL_RCC_OscConfig+0x78>
 8001440:	4bb0      	ldr	r3, [pc, #704]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4baf      	ldr	r3, [pc, #700]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001446:	2180      	movs	r1, #128	; 0x80
 8001448:	0249      	lsls	r1, r1, #9
 800144a:	430a      	orrs	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	e020      	b.n	8001492 <HAL_RCC_OscConfig+0xba>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	23a0      	movs	r3, #160	; 0xa0
 8001456:	02db      	lsls	r3, r3, #11
 8001458:	429a      	cmp	r2, r3
 800145a:	d10e      	bne.n	800147a <HAL_RCC_OscConfig+0xa2>
 800145c:	4ba9      	ldr	r3, [pc, #676]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4ba8      	ldr	r3, [pc, #672]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001462:	2180      	movs	r1, #128	; 0x80
 8001464:	02c9      	lsls	r1, r1, #11
 8001466:	430a      	orrs	r2, r1
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	4ba6      	ldr	r3, [pc, #664]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4ba5      	ldr	r3, [pc, #660]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001470:	2180      	movs	r1, #128	; 0x80
 8001472:	0249      	lsls	r1, r1, #9
 8001474:	430a      	orrs	r2, r1
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	e00b      	b.n	8001492 <HAL_RCC_OscConfig+0xba>
 800147a:	4ba2      	ldr	r3, [pc, #648]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4ba1      	ldr	r3, [pc, #644]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001480:	49a1      	ldr	r1, [pc, #644]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 8001482:	400a      	ands	r2, r1
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	4b9f      	ldr	r3, [pc, #636]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4b9e      	ldr	r3, [pc, #632]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800148c:	499f      	ldr	r1, [pc, #636]	; (800170c <HAL_RCC_OscConfig+0x334>)
 800148e:	400a      	ands	r2, r1
 8001490:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d014      	beq.n	80014c4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149a:	f7ff fc63 	bl	8000d64 <HAL_GetTick>
 800149e:	0003      	movs	r3, r0
 80014a0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fc5e 	bl	8000d64 <HAL_GetTick>
 80014a8:	0002      	movs	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e298      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b6:	4b93      	ldr	r3, [pc, #588]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	029b      	lsls	r3, r3, #10
 80014be:	4013      	ands	r3, r2
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0xcc>
 80014c2:	e015      	b.n	80014f0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff fc4e 	bl	8000d64 <HAL_GetTick>
 80014c8:	0003      	movs	r3, r0
 80014ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ce:	f7ff fc49 	bl	8000d64 <HAL_GetTick>
 80014d2:	0002      	movs	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b64      	cmp	r3, #100	; 0x64
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e283      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014e0:	4b88      	ldr	r3, [pc, #544]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	029b      	lsls	r3, r3, #10
 80014e8:	4013      	ands	r3, r2
 80014ea:	d1f0      	bne.n	80014ce <HAL_RCC_OscConfig+0xf6>
 80014ec:	e000      	b.n	80014f0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2202      	movs	r2, #2
 80014f6:	4013      	ands	r3, r2
 80014f8:	d100      	bne.n	80014fc <HAL_RCC_OscConfig+0x124>
 80014fa:	e099      	b.n	8001630 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014fc:	4b81      	ldr	r3, [pc, #516]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2238      	movs	r2, #56	; 0x38
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001506:	4b7f      	ldr	r3, [pc, #508]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	2203      	movs	r2, #3
 800150c:	4013      	ands	r3, r2
 800150e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	2b10      	cmp	r3, #16
 8001514:	d102      	bne.n	800151c <HAL_RCC_OscConfig+0x144>
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d002      	beq.n	8001522 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d135      	bne.n	800158e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001522:	4b78      	ldr	r3, [pc, #480]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4013      	ands	r3, r2
 800152c:	d005      	beq.n	800153a <HAL_RCC_OscConfig+0x162>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e256      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153a:	4b72      	ldr	r3, [pc, #456]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4a74      	ldr	r2, [pc, #464]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001540:	4013      	ands	r3, r2
 8001542:	0019      	movs	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	021a      	lsls	r2, r3, #8
 800154a:	4b6e      	ldr	r3, [pc, #440]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800154c:	430a      	orrs	r2, r1
 800154e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d112      	bne.n	800157c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001556:	4b6b      	ldr	r3, [pc, #428]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a6e      	ldr	r2, [pc, #440]	; (8001714 <HAL_RCC_OscConfig+0x33c>)
 800155c:	4013      	ands	r3, r2
 800155e:	0019      	movs	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691a      	ldr	r2, [r3, #16]
 8001564:	4b67      	ldr	r3, [pc, #412]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001566:	430a      	orrs	r2, r1
 8001568:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800156a:	4b66      	ldr	r3, [pc, #408]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	0adb      	lsrs	r3, r3, #11
 8001570:	2207      	movs	r2, #7
 8001572:	4013      	ands	r3, r2
 8001574:	4a68      	ldr	r2, [pc, #416]	; (8001718 <HAL_RCC_OscConfig+0x340>)
 8001576:	40da      	lsrs	r2, r3
 8001578:	4b68      	ldr	r3, [pc, #416]	; (800171c <HAL_RCC_OscConfig+0x344>)
 800157a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800157c:	4b68      	ldr	r3, [pc, #416]	; (8001720 <HAL_RCC_OscConfig+0x348>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	0018      	movs	r0, r3
 8001582:	f7ff fb93 	bl	8000cac <HAL_InitTick>
 8001586:	1e03      	subs	r3, r0, #0
 8001588:	d051      	beq.n	800162e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e22c      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d030      	beq.n	80015f8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001596:	4b5b      	ldr	r3, [pc, #364]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a5e      	ldr	r2, [pc, #376]	; (8001714 <HAL_RCC_OscConfig+0x33c>)
 800159c:	4013      	ands	r3, r2
 800159e:	0019      	movs	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	4b57      	ldr	r3, [pc, #348]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80015a6:	430a      	orrs	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80015aa:	4b56      	ldr	r3, [pc, #344]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4b55      	ldr	r3, [pc, #340]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80015b0:	2180      	movs	r1, #128	; 0x80
 80015b2:	0049      	lsls	r1, r1, #1
 80015b4:	430a      	orrs	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b8:	f7ff fbd4 	bl	8000d64 <HAL_GetTick>
 80015bc:	0003      	movs	r3, r0
 80015be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c2:	f7ff fbcf 	bl	8000d64 <HAL_GetTick>
 80015c6:	0002      	movs	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e209      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d4:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	4013      	ands	r3, r2
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e0:	4b48      	ldr	r3, [pc, #288]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	4a4a      	ldr	r2, [pc, #296]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	0019      	movs	r1, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	021a      	lsls	r2, r3, #8
 80015f0:	4b44      	ldr	r3, [pc, #272]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80015f2:	430a      	orrs	r2, r1
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	e01b      	b.n	8001630 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80015f8:	4b42      	ldr	r3, [pc, #264]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b41      	ldr	r3, [pc, #260]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80015fe:	4949      	ldr	r1, [pc, #292]	; (8001724 <HAL_RCC_OscConfig+0x34c>)
 8001600:	400a      	ands	r2, r1
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001604:	f7ff fbae 	bl	8000d64 <HAL_GetTick>
 8001608:	0003      	movs	r3, r0
 800160a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160e:	f7ff fba9 	bl	8000d64 <HAL_GetTick>
 8001612:	0002      	movs	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e1e3      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001620:	4b38      	ldr	r3, [pc, #224]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4013      	ands	r3, r2
 800162a:	d1f0      	bne.n	800160e <HAL_RCC_OscConfig+0x236>
 800162c:	e000      	b.n	8001630 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800162e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2208      	movs	r2, #8
 8001636:	4013      	ands	r3, r2
 8001638:	d047      	beq.n	80016ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800163a:	4b32      	ldr	r3, [pc, #200]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2238      	movs	r2, #56	; 0x38
 8001640:	4013      	ands	r3, r2
 8001642:	2b18      	cmp	r3, #24
 8001644:	d10a      	bne.n	800165c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001646:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164a:	2202      	movs	r2, #2
 800164c:	4013      	ands	r3, r2
 800164e:	d03c      	beq.n	80016ca <HAL_RCC_OscConfig+0x2f2>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d138      	bne.n	80016ca <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e1c5      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d019      	beq.n	8001698 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001664:	4b27      	ldr	r3, [pc, #156]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001666:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001668:	4b26      	ldr	r3, [pc, #152]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800166a:	2101      	movs	r1, #1
 800166c:	430a      	orrs	r2, r1
 800166e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff fb78 	bl	8000d64 <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167a:	f7ff fb73 	bl	8000d64 <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e1ad      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800168c:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800168e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001690:	2202      	movs	r2, #2
 8001692:	4013      	ands	r3, r2
 8001694:	d0f1      	beq.n	800167a <HAL_RCC_OscConfig+0x2a2>
 8001696:	e018      	b.n	80016ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800169a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800169e:	2101      	movs	r1, #1
 80016a0:	438a      	bics	r2, r1
 80016a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff fb5e 	bl	8000d64 <HAL_GetTick>
 80016a8:	0003      	movs	r3, r0
 80016aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ae:	f7ff fb59 	bl	8000d64 <HAL_GetTick>
 80016b2:	0002      	movs	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e193      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c0:	4b10      	ldr	r3, [pc, #64]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80016c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c4:	2202      	movs	r2, #2
 80016c6:	4013      	ands	r3, r2
 80016c8:	d1f1      	bne.n	80016ae <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2204      	movs	r2, #4
 80016d0:	4013      	ands	r3, r2
 80016d2:	d100      	bne.n	80016d6 <HAL_RCC_OscConfig+0x2fe>
 80016d4:	e0c6      	b.n	8001864 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d6:	231f      	movs	r3, #31
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2238      	movs	r2, #56	; 0x38
 80016e4:	4013      	ands	r3, r2
 80016e6:	2b20      	cmp	r3, #32
 80016e8:	d11e      	bne.n	8001728 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80016ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ee:	2202      	movs	r2, #2
 80016f0:	4013      	ands	r3, r2
 80016f2:	d100      	bne.n	80016f6 <HAL_RCC_OscConfig+0x31e>
 80016f4:	e0b6      	b.n	8001864 <HAL_RCC_OscConfig+0x48c>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d000      	beq.n	8001700 <HAL_RCC_OscConfig+0x328>
 80016fe:	e0b1      	b.n	8001864 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e171      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
 8001704:	40021000 	.word	0x40021000
 8001708:	fffeffff 	.word	0xfffeffff
 800170c:	fffbffff 	.word	0xfffbffff
 8001710:	ffff80ff 	.word	0xffff80ff
 8001714:	ffffc7ff 	.word	0xffffc7ff
 8001718:	00f42400 	.word	0x00f42400
 800171c:	20000018 	.word	0x20000018
 8001720:	2000001c 	.word	0x2000001c
 8001724:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001728:	4bb1      	ldr	r3, [pc, #708]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 800172a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	055b      	lsls	r3, r3, #21
 8001730:	4013      	ands	r3, r2
 8001732:	d101      	bne.n	8001738 <HAL_RCC_OscConfig+0x360>
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <HAL_RCC_OscConfig+0x362>
 8001738:	2300      	movs	r3, #0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d011      	beq.n	8001762 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	4bac      	ldr	r3, [pc, #688]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001740:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001742:	4bab      	ldr	r3, [pc, #684]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001744:	2180      	movs	r1, #128	; 0x80
 8001746:	0549      	lsls	r1, r1, #21
 8001748:	430a      	orrs	r2, r1
 800174a:	63da      	str	r2, [r3, #60]	; 0x3c
 800174c:	4ba8      	ldr	r3, [pc, #672]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 800174e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	055b      	lsls	r3, r3, #21
 8001754:	4013      	ands	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800175a:	231f      	movs	r3, #31
 800175c:	18fb      	adds	r3, r7, r3
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001762:	4ba4      	ldr	r3, [pc, #656]	; (80019f4 <HAL_RCC_OscConfig+0x61c>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4013      	ands	r3, r2
 800176c:	d11a      	bne.n	80017a4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800176e:	4ba1      	ldr	r3, [pc, #644]	; (80019f4 <HAL_RCC_OscConfig+0x61c>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4ba0      	ldr	r3, [pc, #640]	; (80019f4 <HAL_RCC_OscConfig+0x61c>)
 8001774:	2180      	movs	r1, #128	; 0x80
 8001776:	0049      	lsls	r1, r1, #1
 8001778:	430a      	orrs	r2, r1
 800177a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800177c:	f7ff faf2 	bl	8000d64 <HAL_GetTick>
 8001780:	0003      	movs	r3, r0
 8001782:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001786:	f7ff faed 	bl	8000d64 <HAL_GetTick>
 800178a:	0002      	movs	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e127      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001798:	4b96      	ldr	r3, [pc, #600]	; (80019f4 <HAL_RCC_OscConfig+0x61c>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4013      	ands	r3, r2
 80017a2:	d0f0      	beq.n	8001786 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x3e2>
 80017ac:	4b90      	ldr	r3, [pc, #576]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80017ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017b0:	4b8f      	ldr	r3, [pc, #572]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80017b2:	2101      	movs	r1, #1
 80017b4:	430a      	orrs	r2, r1
 80017b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80017b8:	e01c      	b.n	80017f4 <HAL_RCC_OscConfig+0x41c>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b05      	cmp	r3, #5
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0x404>
 80017c2:	4b8b      	ldr	r3, [pc, #556]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80017c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017c6:	4b8a      	ldr	r3, [pc, #552]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80017c8:	2104      	movs	r1, #4
 80017ca:	430a      	orrs	r2, r1
 80017cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80017ce:	4b88      	ldr	r3, [pc, #544]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80017d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017d2:	4b87      	ldr	r3, [pc, #540]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80017d4:	2101      	movs	r1, #1
 80017d6:	430a      	orrs	r2, r1
 80017d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80017da:	e00b      	b.n	80017f4 <HAL_RCC_OscConfig+0x41c>
 80017dc:	4b84      	ldr	r3, [pc, #528]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80017de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017e0:	4b83      	ldr	r3, [pc, #524]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80017e2:	2101      	movs	r1, #1
 80017e4:	438a      	bics	r2, r1
 80017e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80017e8:	4b81      	ldr	r3, [pc, #516]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80017ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017ec:	4b80      	ldr	r3, [pc, #512]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80017ee:	2104      	movs	r1, #4
 80017f0:	438a      	bics	r2, r1
 80017f2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d014      	beq.n	8001826 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fc:	f7ff fab2 	bl	8000d64 <HAL_GetTick>
 8001800:	0003      	movs	r3, r0
 8001802:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001804:	e009      	b.n	800181a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001806:	f7ff faad 	bl	8000d64 <HAL_GetTick>
 800180a:	0002      	movs	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	4a79      	ldr	r2, [pc, #484]	; (80019f8 <HAL_RCC_OscConfig+0x620>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e0e6      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800181a:	4b75      	ldr	r3, [pc, #468]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 800181c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181e:	2202      	movs	r2, #2
 8001820:	4013      	ands	r3, r2
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x42e>
 8001824:	e013      	b.n	800184e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001826:	f7ff fa9d 	bl	8000d64 <HAL_GetTick>
 800182a:	0003      	movs	r3, r0
 800182c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800182e:	e009      	b.n	8001844 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001830:	f7ff fa98 	bl	8000d64 <HAL_GetTick>
 8001834:	0002      	movs	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	4a6f      	ldr	r2, [pc, #444]	; (80019f8 <HAL_RCC_OscConfig+0x620>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e0d1      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001844:	4b6a      	ldr	r3, [pc, #424]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001848:	2202      	movs	r2, #2
 800184a:	4013      	ands	r3, r2
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800184e:	231f      	movs	r3, #31
 8001850:	18fb      	adds	r3, r7, r3
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d105      	bne.n	8001864 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001858:	4b65      	ldr	r3, [pc, #404]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 800185a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800185c:	4b64      	ldr	r3, [pc, #400]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 800185e:	4967      	ldr	r1, [pc, #412]	; (80019fc <HAL_RCC_OscConfig+0x624>)
 8001860:	400a      	ands	r2, r1
 8001862:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d100      	bne.n	800186e <HAL_RCC_OscConfig+0x496>
 800186c:	e0bb      	b.n	80019e6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800186e:	4b60      	ldr	r3, [pc, #384]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2238      	movs	r2, #56	; 0x38
 8001874:	4013      	ands	r3, r2
 8001876:	2b10      	cmp	r3, #16
 8001878:	d100      	bne.n	800187c <HAL_RCC_OscConfig+0x4a4>
 800187a:	e07b      	b.n	8001974 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d156      	bne.n	8001932 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001884:	4b5a      	ldr	r3, [pc, #360]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b59      	ldr	r3, [pc, #356]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 800188a:	495d      	ldr	r1, [pc, #372]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 800188c:	400a      	ands	r2, r1
 800188e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff fa68 	bl	8000d64 <HAL_GetTick>
 8001894:	0003      	movs	r3, r0
 8001896:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189a:	f7ff fa63 	bl	8000d64 <HAL_GetTick>
 800189e:	0002      	movs	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e09d      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ac:	4b50      	ldr	r3, [pc, #320]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	049b      	lsls	r3, r3, #18
 80018b4:	4013      	ands	r3, r2
 80018b6:	d1f0      	bne.n	800189a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b8:	4b4d      	ldr	r3, [pc, #308]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	4a51      	ldr	r2, [pc, #324]	; (8001a04 <HAL_RCC_OscConfig+0x62c>)
 80018be:	4013      	ands	r3, r2
 80018c0:	0019      	movs	r1, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1a      	ldr	r2, [r3, #32]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e4:	431a      	orrs	r2, r3
 80018e6:	4b42      	ldr	r3, [pc, #264]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80018e8:	430a      	orrs	r2, r1
 80018ea:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ec:	4b40      	ldr	r3, [pc, #256]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b3f      	ldr	r3, [pc, #252]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	0449      	lsls	r1, r1, #17
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80018fa:	4b3d      	ldr	r3, [pc, #244]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	4b3c      	ldr	r3, [pc, #240]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001900:	2180      	movs	r1, #128	; 0x80
 8001902:	0549      	lsls	r1, r1, #21
 8001904:	430a      	orrs	r2, r1
 8001906:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff fa2c 	bl	8000d64 <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001912:	f7ff fa27 	bl	8000d64 <HAL_GetTick>
 8001916:	0002      	movs	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e061      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001924:	4b32      	ldr	r3, [pc, #200]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	049b      	lsls	r3, r3, #18
 800192c:	4013      	ands	r3, r2
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x53a>
 8001930:	e059      	b.n	80019e6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001932:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001938:	4931      	ldr	r1, [pc, #196]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 800193a:	400a      	ands	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193e:	f7ff fa11 	bl	8000d64 <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff fa0c 	bl	8000d64 <HAL_GetTick>
 800194c:	0002      	movs	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e046      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195a:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	049b      	lsls	r3, r3, #18
 8001962:	4013      	ands	r3, r2
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001966:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 800196c:	4926      	ldr	r1, [pc, #152]	; (8001a08 <HAL_RCC_OscConfig+0x630>)
 800196e:	400a      	ands	r2, r1
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	e038      	b.n	80019e6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e033      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001980:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2203      	movs	r2, #3
 800198a:	401a      	ands	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	429a      	cmp	r2, r3
 8001992:	d126      	bne.n	80019e2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	2270      	movs	r2, #112	; 0x70
 8001998:	401a      	ands	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199e:	429a      	cmp	r2, r3
 80019a0:	d11f      	bne.n	80019e2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	23fe      	movs	r3, #254	; 0xfe
 80019a6:	01db      	lsls	r3, r3, #7
 80019a8:	401a      	ands	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ae:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d116      	bne.n	80019e2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	23f8      	movs	r3, #248	; 0xf8
 80019b8:	039b      	lsls	r3, r3, #14
 80019ba:	401a      	ands	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d10e      	bne.n	80019e2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	23e0      	movs	r3, #224	; 0xe0
 80019c8:	051b      	lsls	r3, r3, #20
 80019ca:	401a      	ands	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	0f5b      	lsrs	r3, r3, #29
 80019d8:	075a      	lsls	r2, r3, #29
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d001      	beq.n	80019e6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	0018      	movs	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b008      	add	sp, #32
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40007000 	.word	0x40007000
 80019f8:	00001388 	.word	0x00001388
 80019fc:	efffffff 	.word	0xefffffff
 8001a00:	feffffff 	.word	0xfeffffff
 8001a04:	11c1808c 	.word	0x11c1808c
 8001a08:	eefefffc 	.word	0xeefefffc

08001a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0e9      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a20:	4b76      	ldr	r3, [pc, #472]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2207      	movs	r2, #7
 8001a26:	4013      	ands	r3, r2
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d91e      	bls.n	8001a6c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b73      	ldr	r3, [pc, #460]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2207      	movs	r2, #7
 8001a34:	4393      	bics	r3, r2
 8001a36:	0019      	movs	r1, r3
 8001a38:	4b70      	ldr	r3, [pc, #448]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a40:	f7ff f990 	bl	8000d64 <HAL_GetTick>
 8001a44:	0003      	movs	r3, r0
 8001a46:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a48:	e009      	b.n	8001a5e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4a:	f7ff f98b 	bl	8000d64 <HAL_GetTick>
 8001a4e:	0002      	movs	r2, r0
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	4a6a      	ldr	r2, [pc, #424]	; (8001c00 <HAL_RCC_ClockConfig+0x1f4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e0ca      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a5e:	4b67      	ldr	r3, [pc, #412]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2207      	movs	r2, #7
 8001a64:	4013      	ands	r3, r2
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1ee      	bne.n	8001a4a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2202      	movs	r2, #2
 8001a72:	4013      	ands	r3, r2
 8001a74:	d015      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d006      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a80:	4b60      	ldr	r3, [pc, #384]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	4b5f      	ldr	r3, [pc, #380]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001a86:	21e0      	movs	r1, #224	; 0xe0
 8001a88:	01c9      	lsls	r1, r1, #7
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	4a5d      	ldr	r2, [pc, #372]	; (8001c08 <HAL_RCC_ClockConfig+0x1fc>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	0019      	movs	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	4b59      	ldr	r3, [pc, #356]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d057      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab4:	4b53      	ldr	r3, [pc, #332]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	029b      	lsls	r3, r3, #10
 8001abc:	4013      	ands	r3, r2
 8001abe:	d12b      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e097      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d107      	bne.n	8001adc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001acc:	4b4d      	ldr	r3, [pc, #308]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	049b      	lsls	r3, r3, #18
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d11f      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e08b      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d107      	bne.n	8001af4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae4:	4b47      	ldr	r3, [pc, #284]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4013      	ands	r3, r2
 8001aee:	d113      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e07f      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001afc:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b00:	2202      	movs	r2, #2
 8001b02:	4013      	ands	r3, r2
 8001b04:	d108      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e074      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b0a:	4b3e      	ldr	r3, [pc, #248]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0e:	2202      	movs	r2, #2
 8001b10:	4013      	ands	r3, r2
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e06d      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b18:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	4393      	bics	r3, r2
 8001b20:	0019      	movs	r1, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	4b37      	ldr	r3, [pc, #220]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b2c:	f7ff f91a 	bl	8000d64 <HAL_GetTick>
 8001b30:	0003      	movs	r3, r0
 8001b32:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b34:	e009      	b.n	8001b4a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b36:	f7ff f915 	bl	8000d64 <HAL_GetTick>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	4a2f      	ldr	r2, [pc, #188]	; (8001c00 <HAL_RCC_ClockConfig+0x1f4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e054      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2238      	movs	r2, #56	; 0x38
 8001b50:	401a      	ands	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d1ec      	bne.n	8001b36 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2207      	movs	r2, #7
 8001b62:	4013      	ands	r3, r2
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d21e      	bcs.n	8001ba8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2207      	movs	r2, #7
 8001b70:	4393      	bics	r3, r2
 8001b72:	0019      	movs	r1, r3
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b7c:	f7ff f8f2 	bl	8000d64 <HAL_GetTick>
 8001b80:	0003      	movs	r3, r0
 8001b82:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b84:	e009      	b.n	8001b9a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b86:	f7ff f8ed 	bl	8000d64 <HAL_GetTick>
 8001b8a:	0002      	movs	r2, r0
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	4a1b      	ldr	r2, [pc, #108]	; (8001c00 <HAL_RCC_ClockConfig+0x1f4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e02c      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b9a:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2207      	movs	r2, #7
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d1ee      	bne.n	8001b86 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2204      	movs	r2, #4
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d009      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb2:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	4a15      	ldr	r2, [pc, #84]	; (8001c0c <HAL_RCC_ClockConfig+0x200>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	0019      	movs	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001bc6:	f000 f829 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8001bca:	0001      	movs	r1, r0
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <HAL_RCC_ClockConfig+0x204>)
 8001bd8:	0092      	lsls	r2, r2, #2
 8001bda:	58d3      	ldr	r3, [r2, r3]
 8001bdc:	221f      	movs	r2, #31
 8001bde:	4013      	ands	r3, r2
 8001be0:	000a      	movs	r2, r1
 8001be2:	40da      	lsrs	r2, r3
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_ClockConfig+0x208>)
 8001be6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0018      	movs	r0, r3
 8001bee:	f7ff f85d 	bl	8000cac <HAL_InitTick>
 8001bf2:	0003      	movs	r3, r0
}
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b004      	add	sp, #16
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40022000 	.word	0x40022000
 8001c00:	00001388 	.word	0x00001388
 8001c04:	40021000 	.word	0x40021000
 8001c08:	fffff0ff 	.word	0xfffff0ff
 8001c0c:	ffff8fff 	.word	0xffff8fff
 8001c10:	080038a0 	.word	0x080038a0
 8001c14:	20000018 	.word	0x20000018
 8001c18:	2000001c 	.word	0x2000001c

08001c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c22:	4b3c      	ldr	r3, [pc, #240]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2238      	movs	r2, #56	; 0x38
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d10f      	bne.n	8001c4c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c2c:	4b39      	ldr	r3, [pc, #228]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	0adb      	lsrs	r3, r3, #11
 8001c32:	2207      	movs	r2, #7
 8001c34:	4013      	ands	r3, r2
 8001c36:	2201      	movs	r2, #1
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	0013      	movs	r3, r2
 8001c3c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c3e:	6839      	ldr	r1, [r7, #0]
 8001c40:	4835      	ldr	r0, [pc, #212]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c42:	f7fe fa67 	bl	8000114 <__udivsi3>
 8001c46:	0003      	movs	r3, r0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	e05d      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c4c:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2238      	movs	r2, #56	; 0x38
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d102      	bne.n	8001c5e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c58:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x100>)
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	e054      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c5e:	4b2d      	ldr	r3, [pc, #180]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2238      	movs	r2, #56	; 0x38
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d138      	bne.n	8001cdc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c6a:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2203      	movs	r2, #3
 8001c70:	4013      	ands	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	3301      	adds	r3, #1
 8001c80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d10d      	bne.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	4824      	ldr	r0, [pc, #144]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x100>)
 8001c8c:	f7fe fa42 	bl	8000114 <__udivsi3>
 8001c90:	0003      	movs	r3, r0
 8001c92:	0019      	movs	r1, r3
 8001c94:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	227f      	movs	r2, #127	; 0x7f
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	434b      	muls	r3, r1
 8001ca0:	617b      	str	r3, [r7, #20]
        break;
 8001ca2:	e00d      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	481c      	ldr	r0, [pc, #112]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ca8:	f7fe fa34 	bl	8000114 <__udivsi3>
 8001cac:	0003      	movs	r3, r0
 8001cae:	0019      	movs	r1, r3
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	227f      	movs	r2, #127	; 0x7f
 8001cb8:	4013      	ands	r3, r2
 8001cba:	434b      	muls	r3, r1
 8001cbc:	617b      	str	r3, [r7, #20]
        break;
 8001cbe:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001cc0:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0f5b      	lsrs	r3, r3, #29
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	4013      	ands	r3, r2
 8001cca:	3301      	adds	r3, #1
 8001ccc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	6978      	ldr	r0, [r7, #20]
 8001cd2:	f7fe fa1f 	bl	8000114 <__udivsi3>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	e015      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2238      	movs	r2, #56	; 0x38
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b20      	cmp	r3, #32
 8001ce6:	d103      	bne.n	8001cf0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	e00b      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2238      	movs	r2, #56	; 0x38
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b18      	cmp	r3, #24
 8001cfa:	d103      	bne.n	8001d04 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001cfc:	23fa      	movs	r3, #250	; 0xfa
 8001cfe:	01db      	lsls	r3, r3, #7
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	e001      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d08:	693b      	ldr	r3, [r7, #16]
}
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b006      	add	sp, #24
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	40021000 	.word	0x40021000
 8001d18:	00f42400 	.word	0x00f42400
 8001d1c:	007a1200 	.word	0x007a1200

08001d20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d24:	4b02      	ldr	r3, [pc, #8]	; (8001d30 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d26:	681b      	ldr	r3, [r3, #0]
}
 8001d28:	0018      	movs	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	20000018 	.word	0x20000018

08001d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d34:	b5b0      	push	{r4, r5, r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001d38:	f7ff fff2 	bl	8001d20 <HAL_RCC_GetHCLKFreq>
 8001d3c:	0004      	movs	r4, r0
 8001d3e:	f7ff fb3f 	bl	80013c0 <LL_RCC_GetAPB1Prescaler>
 8001d42:	0003      	movs	r3, r0
 8001d44:	0b1a      	lsrs	r2, r3, #12
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d48:	0092      	lsls	r2, r2, #2
 8001d4a:	58d3      	ldr	r3, [r2, r3]
 8001d4c:	221f      	movs	r2, #31
 8001d4e:	4013      	ands	r3, r2
 8001d50:	40dc      	lsrs	r4, r3
 8001d52:	0023      	movs	r3, r4
}
 8001d54:	0018      	movs	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bdb0      	pop	{r4, r5, r7, pc}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	080038e0 	.word	0x080038e0

08001d60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001d68:	2313      	movs	r3, #19
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d70:	2312      	movs	r3, #18
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	029b      	lsls	r3, r3, #10
 8001d80:	4013      	ands	r3, r2
 8001d82:	d100      	bne.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d84:	e0a3      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d86:	2011      	movs	r0, #17
 8001d88:	183b      	adds	r3, r7, r0
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d8e:	4bc3      	ldr	r3, [pc, #780]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	055b      	lsls	r3, r3, #21
 8001d96:	4013      	ands	r3, r2
 8001d98:	d110      	bne.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	4bc0      	ldr	r3, [pc, #768]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d9e:	4bbf      	ldr	r3, [pc, #764]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001da0:	2180      	movs	r1, #128	; 0x80
 8001da2:	0549      	lsls	r1, r1, #21
 8001da4:	430a      	orrs	r2, r1
 8001da6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001da8:	4bbc      	ldr	r3, [pc, #752]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	055b      	lsls	r3, r3, #21
 8001db0:	4013      	ands	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001db6:	183b      	adds	r3, r7, r0
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dbc:	4bb8      	ldr	r3, [pc, #736]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4bb7      	ldr	r3, [pc, #732]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001dc2:	2180      	movs	r1, #128	; 0x80
 8001dc4:	0049      	lsls	r1, r1, #1
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dca:	f7fe ffcb 	bl	8000d64 <HAL_GetTick>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dd2:	e00b      	b.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd4:	f7fe ffc6 	bl	8000d64 <HAL_GetTick>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d904      	bls.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001de2:	2313      	movs	r3, #19
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	2203      	movs	r2, #3
 8001de8:	701a      	strb	r2, [r3, #0]
        break;
 8001dea:	e005      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dec:	4bac      	ldr	r3, [pc, #688]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4013      	ands	r3, r2
 8001df6:	d0ed      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001df8:	2313      	movs	r3, #19
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d154      	bne.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e02:	4ba6      	ldr	r3, [pc, #664]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e06:	23c0      	movs	r3, #192	; 0xc0
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d019      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d014      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e1e:	4b9f      	ldr	r3, [pc, #636]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e22:	4aa0      	ldr	r2, [pc, #640]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e28:	4b9c      	ldr	r3, [pc, #624]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e2c:	4b9b      	ldr	r3, [pc, #620]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e2e:	2180      	movs	r1, #128	; 0x80
 8001e30:	0249      	lsls	r1, r1, #9
 8001e32:	430a      	orrs	r2, r1
 8001e34:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e36:	4b99      	ldr	r3, [pc, #612]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e3a:	4b98      	ldr	r3, [pc, #608]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e3c:	499a      	ldr	r1, [pc, #616]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001e3e:	400a      	ands	r2, r1
 8001e40:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e42:	4b96      	ldr	r3, [pc, #600]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d016      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7fe ff88 	bl	8000d64 <HAL_GetTick>
 8001e54:	0003      	movs	r3, r0
 8001e56:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e58:	e00c      	b.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5a:	f7fe ff83 	bl	8000d64 <HAL_GetTick>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	4a91      	ldr	r2, [pc, #580]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d904      	bls.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001e6a:	2313      	movs	r3, #19
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	2203      	movs	r2, #3
 8001e70:	701a      	strb	r2, [r3, #0]
            break;
 8001e72:	e004      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e74:	4b89      	ldr	r3, [pc, #548]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e78:	2202      	movs	r2, #2
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d0ed      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001e7e:	2313      	movs	r3, #19
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10a      	bne.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e88:	4b84      	ldr	r3, [pc, #528]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8c:	4a85      	ldr	r2, [pc, #532]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e96:	4b81      	ldr	r3, [pc, #516]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e9c:	e00c      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e9e:	2312      	movs	r3, #18
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	2213      	movs	r2, #19
 8001ea4:	18ba      	adds	r2, r7, r2
 8001ea6:	7812      	ldrb	r2, [r2, #0]
 8001ea8:	701a      	strb	r2, [r3, #0]
 8001eaa:	e005      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eac:	2312      	movs	r3, #18
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	2213      	movs	r2, #19
 8001eb2:	18ba      	adds	r2, r7, r2
 8001eb4:	7812      	ldrb	r2, [r2, #0]
 8001eb6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eb8:	2311      	movs	r3, #17
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d105      	bne.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec2:	4b76      	ldr	r3, [pc, #472]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ec4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ec6:	4b75      	ldr	r3, [pc, #468]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ec8:	4979      	ldr	r1, [pc, #484]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001eca:	400a      	ands	r2, r1
 8001ecc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d009      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ed8:	4b70      	ldr	r3, [pc, #448]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001edc:	2203      	movs	r2, #3
 8001ede:	4393      	bics	r3, r2
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	4b6d      	ldr	r3, [pc, #436]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d009      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ef6:	4b69      	ldr	r3, [pc, #420]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efa:	220c      	movs	r2, #12
 8001efc:	4393      	bics	r3, r2
 8001efe:	0019      	movs	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	4b65      	ldr	r3, [pc, #404]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f06:	430a      	orrs	r2, r1
 8001f08:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2210      	movs	r2, #16
 8001f10:	4013      	ands	r3, r2
 8001f12:	d009      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f14:	4b61      	ldr	r3, [pc, #388]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f18:	4a66      	ldr	r2, [pc, #408]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	4b5e      	ldr	r3, [pc, #376]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f24:	430a      	orrs	r2, r1
 8001f26:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4013      	ands	r3, r2
 8001f32:	d009      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f34:	4b59      	ldr	r3, [pc, #356]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f38:	4a5f      	ldr	r2, [pc, #380]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699a      	ldr	r2, [r3, #24]
 8001f42:	4b56      	ldr	r3, [pc, #344]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f44:	430a      	orrs	r2, r1
 8001f46:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4013      	ands	r3, r2
 8001f52:	d009      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f54:	4b51      	ldr	r3, [pc, #324]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f58:	4a58      	ldr	r2, [pc, #352]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	0019      	movs	r1, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69da      	ldr	r2, [r3, #28]
 8001f62:	4b4e      	ldr	r3, [pc, #312]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f64:	430a      	orrs	r2, r1
 8001f66:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d009      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f72:	4b4a      	ldr	r3, [pc, #296]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f76:	4a52      	ldr	r2, [pc, #328]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	4b46      	ldr	r3, [pc, #280]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f82:	430a      	orrs	r2, r1
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	01db      	lsls	r3, r3, #7
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d015      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f92:	4b42      	ldr	r3, [pc, #264]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	0899      	lsrs	r1, r3, #2
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1a      	ldr	r2, [r3, #32]
 8001f9e:	4b3f      	ldr	r3, [pc, #252]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1a      	ldr	r2, [r3, #32]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	05db      	lsls	r3, r3, #23
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d106      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fb0:	4b3a      	ldr	r3, [pc, #232]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	4b39      	ldr	r3, [pc, #228]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fb6:	2180      	movs	r1, #128	; 0x80
 8001fb8:	0249      	lsls	r1, r1, #9
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	031b      	lsls	r3, r3, #12
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d009      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fca:	4b34      	ldr	r3, [pc, #208]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fce:	2240      	movs	r2, #64	; 0x40
 8001fd0:	4393      	bics	r3, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fd8:	4b30      	ldr	r3, [pc, #192]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	039b      	lsls	r3, r3, #14
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d016      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001fea:	4b2c      	ldr	r3, [pc, #176]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fee:	4a35      	ldr	r2, [pc, #212]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ff8:	4b28      	ldr	r3, [pc, #160]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	03db      	lsls	r3, r3, #15
 8002006:	429a      	cmp	r2, r3
 8002008:	d106      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800200a:	4b24      	ldr	r3, [pc, #144]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	4b23      	ldr	r3, [pc, #140]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002010:	2180      	movs	r1, #128	; 0x80
 8002012:	0449      	lsls	r1, r1, #17
 8002014:	430a      	orrs	r2, r1
 8002016:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	03db      	lsls	r3, r3, #15
 8002020:	4013      	ands	r3, r2
 8002022:	d016      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002024:	4b1d      	ldr	r3, [pc, #116]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	4a27      	ldr	r2, [pc, #156]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800202a:	4013      	ands	r3, r2
 800202c:	0019      	movs	r1, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002032:	4b1a      	ldr	r3, [pc, #104]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002034:	430a      	orrs	r2, r1
 8002036:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	045b      	lsls	r3, r3, #17
 8002040:	429a      	cmp	r2, r3
 8002042:	d106      	bne.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002044:	4b15      	ldr	r3, [pc, #84]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	4b14      	ldr	r3, [pc, #80]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	0449      	lsls	r1, r1, #17
 800204e:	430a      	orrs	r2, r1
 8002050:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	4013      	ands	r3, r2
 800205c:	d016      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800205e:	4b0f      	ldr	r3, [pc, #60]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002062:	4a1a      	ldr	r2, [pc, #104]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002064:	4013      	ands	r3, r2
 8002066:	0019      	movs	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695a      	ldr	r2, [r3, #20]
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800206e:	430a      	orrs	r2, r1
 8002070:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	2380      	movs	r3, #128	; 0x80
 8002078:	01db      	lsls	r3, r3, #7
 800207a:	429a      	cmp	r2, r3
 800207c:	d106      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002084:	2180      	movs	r1, #128	; 0x80
 8002086:	0249      	lsls	r1, r1, #9
 8002088:	430a      	orrs	r2, r1
 800208a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800208c:	2312      	movs	r3, #18
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	781b      	ldrb	r3, [r3, #0]
}
 8002092:	0018      	movs	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	b006      	add	sp, #24
 8002098:	bd80      	pop	{r7, pc}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	40021000 	.word	0x40021000
 80020a0:	40007000 	.word	0x40007000
 80020a4:	fffffcff 	.word	0xfffffcff
 80020a8:	fffeffff 	.word	0xfffeffff
 80020ac:	00001388 	.word	0x00001388
 80020b0:	efffffff 	.word	0xefffffff
 80020b4:	fffff3ff 	.word	0xfffff3ff
 80020b8:	fff3ffff 	.word	0xfff3ffff
 80020bc:	ffcfffff 	.word	0xffcfffff
 80020c0:	ffffcfff 	.word	0xffffcfff
 80020c4:	ffbfffff 	.word	0xffbfffff
 80020c8:	feffffff 	.word	0xfeffffff
 80020cc:	ffff3fff 	.word	0xffff3fff

080020d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80020d0:	b5b0      	push	{r4, r5, r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80020d8:	230f      	movs	r3, #15
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d100      	bne.n	80020e8 <HAL_RTC_Init+0x18>
 80020e6:	e08c      	b.n	8002202 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2229      	movs	r2, #41	; 0x29
 80020ec:	5c9b      	ldrb	r3, [r3, r2]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10b      	bne.n	800210c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2228      	movs	r2, #40	; 0x28
 80020f8:	2100      	movs	r1, #0
 80020fa:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2288      	movs	r2, #136	; 0x88
 8002100:	0212      	lsls	r2, r2, #8
 8002102:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	0018      	movs	r0, r3
 8002108:	f7fe fc7a 	bl	8000a00 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2229      	movs	r2, #41	; 0x29
 8002110:	2102      	movs	r1, #2
 8002112:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2210      	movs	r2, #16
 800211c:	4013      	ands	r3, r2
 800211e:	2b10      	cmp	r3, #16
 8002120:	d062      	beq.n	80021e8 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	22ca      	movs	r2, #202	; 0xca
 8002128:	625a      	str	r2, [r3, #36]	; 0x24
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2253      	movs	r2, #83	; 0x53
 8002130:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002132:	250f      	movs	r5, #15
 8002134:	197c      	adds	r4, r7, r5
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	0018      	movs	r0, r3
 800213a:	f000 f892 	bl	8002262 <RTC_EnterInitMode>
 800213e:	0003      	movs	r3, r0
 8002140:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002142:	0028      	movs	r0, r5
 8002144:	183b      	adds	r3, r7, r0
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d12c      	bne.n	80021a6 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699a      	ldr	r2, [r3, #24]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	492e      	ldr	r1, [pc, #184]	; (8002210 <HAL_RTC_Init+0x140>)
 8002158:	400a      	ands	r2, r1
 800215a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6999      	ldr	r1, [r3, #24]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6912      	ldr	r2, [r2, #16]
 8002182:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6919      	ldr	r1, [r3, #16]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	041a      	lsls	r2, r3, #16
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002198:	183c      	adds	r4, r7, r0
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	0018      	movs	r0, r3
 800219e:	f000 f8a3 	bl	80022e8 <RTC_ExitInitMode>
 80021a2:	0003      	movs	r3, r0
 80021a4:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80021a6:	230f      	movs	r3, #15
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d116      	bne.n	80021de <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699a      	ldr	r2, [r3, #24]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	00d2      	lsls	r2, r2, #3
 80021bc:	08d2      	lsrs	r2, r2, #3
 80021be:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6999      	ldr	r1, [r3, #24]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	22ff      	movs	r2, #255	; 0xff
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24
 80021e6:	e003      	b.n	80021f0 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80021e8:	230f      	movs	r3, #15
 80021ea:	18fb      	adds	r3, r7, r3
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80021f0:	230f      	movs	r3, #15
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d103      	bne.n	8002202 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2229      	movs	r2, #41	; 0x29
 80021fe:	2101      	movs	r1, #1
 8002200:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002202:	230f      	movs	r3, #15
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	781b      	ldrb	r3, [r3, #0]
}
 8002208:	0018      	movs	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	b004      	add	sp, #16
 800220e:	bdb0      	pop	{r4, r5, r7, pc}
 8002210:	fb8fffbf 	.word	0xfb8fffbf

08002214 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	21a0      	movs	r1, #160	; 0xa0
 8002228:	438a      	bics	r2, r1
 800222a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800222c:	f7fe fd9a 	bl	8000d64 <HAL_GetTick>
 8002230:	0003      	movs	r3, r0
 8002232:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002234:	e00a      	b.n	800224c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002236:	f7fe fd95 	bl	8000d64 <HAL_GetTick>
 800223a:	0002      	movs	r2, r0
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1ad2      	subs	r2, r2, r3
 8002240:	23fa      	movs	r3, #250	; 0xfa
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	429a      	cmp	r2, r3
 8002246:	d901      	bls.n	800224c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e006      	b.n	800225a <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	4013      	ands	r3, r2
 8002256:	d0ee      	beq.n	8002236 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	0018      	movs	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	b004      	add	sp, #16
 8002260:	bd80      	pop	{r7, pc}

08002262 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800226a:	230f      	movs	r3, #15
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	2240      	movs	r2, #64	; 0x40
 800227a:	4013      	ands	r3, r2
 800227c:	d12c      	bne.n	80022d8 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2180      	movs	r1, #128	; 0x80
 800228a:	430a      	orrs	r2, r1
 800228c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800228e:	f7fe fd69 	bl	8000d64 <HAL_GetTick>
 8002292:	0003      	movs	r3, r0
 8002294:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002296:	e014      	b.n	80022c2 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002298:	f7fe fd64 	bl	8000d64 <HAL_GetTick>
 800229c:	0002      	movs	r2, r0
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	1ad2      	subs	r2, r2, r3
 80022a2:	200f      	movs	r0, #15
 80022a4:	183b      	adds	r3, r7, r0
 80022a6:	1839      	adds	r1, r7, r0
 80022a8:	7809      	ldrb	r1, [r1, #0]
 80022aa:	7019      	strb	r1, [r3, #0]
 80022ac:	23fa      	movs	r3, #250	; 0xfa
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d906      	bls.n	80022c2 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80022b4:	183b      	adds	r3, r7, r0
 80022b6:	2203      	movs	r2, #3
 80022b8:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2229      	movs	r2, #41	; 0x29
 80022be:	2103      	movs	r1, #3
 80022c0:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2240      	movs	r2, #64	; 0x40
 80022ca:	4013      	ands	r3, r2
 80022cc:	d104      	bne.n	80022d8 <RTC_EnterInitMode+0x76>
 80022ce:	230f      	movs	r3, #15
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d1df      	bne.n	8002298 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80022d8:	230f      	movs	r3, #15
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	781b      	ldrb	r3, [r3, #0]
}
 80022de:	0018      	movs	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b004      	add	sp, #16
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f0:	240f      	movs	r4, #15
 80022f2:	193b      	adds	r3, r7, r4
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80022f8:	4b1c      	ldr	r3, [pc, #112]	; (800236c <RTC_ExitInitMode+0x84>)
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <RTC_ExitInitMode+0x84>)
 80022fe:	2180      	movs	r1, #128	; 0x80
 8002300:	438a      	bics	r2, r1
 8002302:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002304:	4b19      	ldr	r3, [pc, #100]	; (800236c <RTC_ExitInitMode+0x84>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	2220      	movs	r2, #32
 800230a:	4013      	ands	r3, r2
 800230c:	d10d      	bne.n	800232a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	0018      	movs	r0, r3
 8002312:	f7ff ff7f 	bl	8002214 <HAL_RTC_WaitForSynchro>
 8002316:	1e03      	subs	r3, r0, #0
 8002318:	d021      	beq.n	800235e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2229      	movs	r2, #41	; 0x29
 800231e:	2103      	movs	r1, #3
 8002320:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002322:	193b      	adds	r3, r7, r4
 8002324:	2203      	movs	r2, #3
 8002326:	701a      	strb	r2, [r3, #0]
 8002328:	e019      	b.n	800235e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <RTC_ExitInitMode+0x84>)
 800232c:	699a      	ldr	r2, [r3, #24]
 800232e:	4b0f      	ldr	r3, [pc, #60]	; (800236c <RTC_ExitInitMode+0x84>)
 8002330:	2120      	movs	r1, #32
 8002332:	438a      	bics	r2, r1
 8002334:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	0018      	movs	r0, r3
 800233a:	f7ff ff6b 	bl	8002214 <HAL_RTC_WaitForSynchro>
 800233e:	1e03      	subs	r3, r0, #0
 8002340:	d007      	beq.n	8002352 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2229      	movs	r2, #41	; 0x29
 8002346:	2103      	movs	r1, #3
 8002348:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800234a:	230f      	movs	r3, #15
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	2203      	movs	r2, #3
 8002350:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <RTC_ExitInitMode+0x84>)
 8002354:	699a      	ldr	r2, [r3, #24]
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <RTC_ExitInitMode+0x84>)
 8002358:	2120      	movs	r1, #32
 800235a:	430a      	orrs	r2, r1
 800235c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800235e:	230f      	movs	r3, #15
 8002360:	18fb      	adds	r3, r7, r3
 8002362:	781b      	ldrb	r3, [r3, #0]
}
 8002364:	0018      	movs	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	b005      	add	sp, #20
 800236a:	bd90      	pop	{r4, r7, pc}
 800236c:	40002800 	.word	0x40002800

08002370 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2228      	movs	r2, #40	; 0x28
 8002380:	5c9b      	ldrb	r3, [r3, r2]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002386:	2302      	movs	r3, #2
 8002388:	e082      	b.n	8002490 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2228      	movs	r2, #40	; 0x28
 800238e:	2101      	movs	r1, #1
 8002390:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2229      	movs	r2, #41	; 0x29
 8002396:	2102      	movs	r1, #2
 8002398:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	22ca      	movs	r2, #202	; 0xca
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2253      	movs	r2, #83	; 0x53
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699a      	ldr	r2, [r3, #24]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4938      	ldr	r1, [pc, #224]	; (8002498 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 80023b6:	400a      	ands	r2, r1
 80023b8:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2104      	movs	r1, #4
 80023c6:	430a      	orrs	r2, r1
 80023c8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80023ca:	4b34      	ldr	r3, [pc, #208]	; (800249c <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2240      	movs	r2, #64	; 0x40
 80023d0:	4013      	ands	r3, r2
 80023d2:	d121      	bne.n	8002418 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 80023d4:	f7fe fcc6 	bl	8000d64 <HAL_GetTick>
 80023d8:	0003      	movs	r3, r0
 80023da:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80023dc:	e016      	b.n	800240c <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80023de:	f7fe fcc1 	bl	8000d64 <HAL_GetTick>
 80023e2:	0002      	movs	r2, r0
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	1ad2      	subs	r2, r2, r3
 80023e8:	23fa      	movs	r3, #250	; 0xfa
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d90d      	bls.n	800240c <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	22ff      	movs	r2, #255	; 0xff
 80023f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2229      	movs	r2, #41	; 0x29
 80023fc:	2103      	movs	r1, #3
 80023fe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2228      	movs	r2, #40	; 0x28
 8002404:	2100      	movs	r1, #0
 8002406:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e041      	b.n	8002490 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2204      	movs	r2, #4
 8002414:	4013      	ands	r3, r2
 8002416:	d0e2      	beq.n	80023de <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2107      	movs	r1, #7
 800242c:	438a      	bics	r2, r1
 800242e:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6999      	ldr	r1, [r3, #24]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	430a      	orrs	r2, r1
 800243e:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002440:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	58d3      	ldr	r3, [r2, r3]
 8002446:	4916      	ldr	r1, [pc, #88]	; (80024a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002448:	2280      	movs	r2, #128	; 0x80
 800244a:	0312      	lsls	r2, r2, #12
 800244c:	4313      	orrs	r3, r2
 800244e:	2280      	movs	r2, #128	; 0x80
 8002450:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699a      	ldr	r2, [r3, #24]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2180      	movs	r1, #128	; 0x80
 800245e:	01c9      	lsls	r1, r1, #7
 8002460:	430a      	orrs	r2, r1
 8002462:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2180      	movs	r1, #128	; 0x80
 8002470:	00c9      	lsls	r1, r1, #3
 8002472:	430a      	orrs	r2, r1
 8002474:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	22ff      	movs	r2, #255	; 0xff
 800247c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2229      	movs	r2, #41	; 0x29
 8002482:	2101      	movs	r1, #1
 8002484:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2228      	movs	r2, #40	; 0x28
 800248a:	2100      	movs	r1, #0
 800248c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	0018      	movs	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	b006      	add	sp, #24
 8002496:	bd80      	pop	{r7, pc}
 8002498:	fffffbff 	.word	0xfffffbff
 800249c:	40002800 	.word	0x40002800
 80024a0:	40021800 	.word	0x40021800

080024a4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b2:	2204      	movs	r2, #4
 80024b4:	4013      	ands	r3, r2
 80024b6:	d00b      	beq.n	80024d0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2104      	movs	r1, #4
 80024c4:	430a      	orrs	r2, r1
 80024c6:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	0018      	movs	r0, r3
 80024cc:	f000 f808 	bl	80024e0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2229      	movs	r2, #41	; 0x29
 80024d4:	2101      	movs	r1, #1
 80024d6:	5499      	strb	r1, [r3, r2]
}
 80024d8:	46c0      	nop			; (mov r8, r8)
 80024da:	46bd      	mov	sp, r7
 80024dc:	b002      	add	sp, #8
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80024e8:	46c0      	nop			; (mov r8, r8)
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b002      	add	sp, #8
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e04a      	b.n	8002598 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	223d      	movs	r2, #61	; 0x3d
 8002506:	5c9b      	ldrb	r3, [r3, r2]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d107      	bne.n	800251e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	223c      	movs	r2, #60	; 0x3c
 8002512:	2100      	movs	r1, #0
 8002514:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	0018      	movs	r0, r3
 800251a:	f7fe fab7 	bl	8000a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	223d      	movs	r2, #61	; 0x3d
 8002522:	2102      	movs	r1, #2
 8002524:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3304      	adds	r3, #4
 800252e:	0019      	movs	r1, r3
 8002530:	0010      	movs	r0, r2
 8002532:	f000 f9e3 	bl	80028fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2248      	movs	r2, #72	; 0x48
 800253a:	2101      	movs	r1, #1
 800253c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	223e      	movs	r2, #62	; 0x3e
 8002542:	2101      	movs	r1, #1
 8002544:	5499      	strb	r1, [r3, r2]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	223f      	movs	r2, #63	; 0x3f
 800254a:	2101      	movs	r1, #1
 800254c:	5499      	strb	r1, [r3, r2]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2240      	movs	r2, #64	; 0x40
 8002552:	2101      	movs	r1, #1
 8002554:	5499      	strb	r1, [r3, r2]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2241      	movs	r2, #65	; 0x41
 800255a:	2101      	movs	r1, #1
 800255c:	5499      	strb	r1, [r3, r2]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2242      	movs	r2, #66	; 0x42
 8002562:	2101      	movs	r1, #1
 8002564:	5499      	strb	r1, [r3, r2]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2243      	movs	r2, #67	; 0x43
 800256a:	2101      	movs	r1, #1
 800256c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2244      	movs	r2, #68	; 0x44
 8002572:	2101      	movs	r1, #1
 8002574:	5499      	strb	r1, [r3, r2]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2245      	movs	r2, #69	; 0x45
 800257a:	2101      	movs	r1, #1
 800257c:	5499      	strb	r1, [r3, r2]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2246      	movs	r2, #70	; 0x46
 8002582:	2101      	movs	r1, #1
 8002584:	5499      	strb	r1, [r3, r2]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2247      	movs	r2, #71	; 0x47
 800258a:	2101      	movs	r1, #1
 800258c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	223d      	movs	r2, #61	; 0x3d
 8002592:	2101      	movs	r1, #1
 8002594:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	0018      	movs	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	b002      	add	sp, #8
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	223d      	movs	r2, #61	; 0x3d
 80025ac:	5c9b      	ldrb	r3, [r3, r2]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d001      	beq.n	80025b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e042      	b.n	800263e <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	223d      	movs	r2, #61	; 0x3d
 80025bc:	2102      	movs	r1, #2
 80025be:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2101      	movs	r1, #1
 80025cc:	430a      	orrs	r2, r1
 80025ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a1c      	ldr	r2, [pc, #112]	; (8002648 <HAL_TIM_Base_Start_IT+0xa8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00f      	beq.n	80025fa <HAL_TIM_Base_Start_IT+0x5a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	05db      	lsls	r3, r3, #23
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d009      	beq.n	80025fa <HAL_TIM_Base_Start_IT+0x5a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a18      	ldr	r2, [pc, #96]	; (800264c <HAL_TIM_Base_Start_IT+0xac>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d004      	beq.n	80025fa <HAL_TIM_Base_Start_IT+0x5a>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a16      	ldr	r2, [pc, #88]	; (8002650 <HAL_TIM_Base_Start_IT+0xb0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d116      	bne.n	8002628 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4a14      	ldr	r2, [pc, #80]	; (8002654 <HAL_TIM_Base_Start_IT+0xb4>)
 8002602:	4013      	ands	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b06      	cmp	r3, #6
 800260a:	d016      	beq.n	800263a <HAL_TIM_Base_Start_IT+0x9a>
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	2380      	movs	r3, #128	; 0x80
 8002610:	025b      	lsls	r3, r3, #9
 8002612:	429a      	cmp	r2, r3
 8002614:	d011      	beq.n	800263a <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2101      	movs	r1, #1
 8002622:	430a      	orrs	r2, r1
 8002624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002626:	e008      	b.n	800263a <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2101      	movs	r1, #1
 8002634:	430a      	orrs	r2, r1
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	e000      	b.n	800263c <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	0018      	movs	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	b004      	add	sp, #16
 8002644:	bd80      	pop	{r7, pc}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	40012c00 	.word	0x40012c00
 800264c:	40000400 	.word	0x40000400
 8002650:	40014000 	.word	0x40014000
 8002654:	00010007 	.word	0x00010007

08002658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2202      	movs	r2, #2
 8002668:	4013      	ands	r3, r2
 800266a:	2b02      	cmp	r3, #2
 800266c:	d124      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2202      	movs	r2, #2
 8002676:	4013      	ands	r3, r2
 8002678:	2b02      	cmp	r3, #2
 800267a:	d11d      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2203      	movs	r2, #3
 8002682:	4252      	negs	r2, r2
 8002684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	2203      	movs	r2, #3
 8002694:	4013      	ands	r3, r2
 8002696:	d004      	beq.n	80026a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	0018      	movs	r0, r3
 800269c:	f000 f916 	bl	80028cc <HAL_TIM_IC_CaptureCallback>
 80026a0:	e007      	b.n	80026b2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	0018      	movs	r0, r3
 80026a6:	f000 f909 	bl	80028bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	0018      	movs	r0, r3
 80026ae:	f000 f915 	bl	80028dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	2204      	movs	r2, #4
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d125      	bne.n	8002712 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2204      	movs	r2, #4
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	d11e      	bne.n	8002712 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2205      	movs	r2, #5
 80026da:	4252      	negs	r2, r2
 80026dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2202      	movs	r2, #2
 80026e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	23c0      	movs	r3, #192	; 0xc0
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4013      	ands	r3, r2
 80026f0:	d004      	beq.n	80026fc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	0018      	movs	r0, r3
 80026f6:	f000 f8e9 	bl	80028cc <HAL_TIM_IC_CaptureCallback>
 80026fa:	e007      	b.n	800270c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	0018      	movs	r0, r3
 8002700:	f000 f8dc 	bl	80028bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	0018      	movs	r0, r3
 8002708:	f000 f8e8 	bl	80028dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	2208      	movs	r2, #8
 800271a:	4013      	ands	r3, r2
 800271c:	2b08      	cmp	r3, #8
 800271e:	d124      	bne.n	800276a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2208      	movs	r2, #8
 8002728:	4013      	ands	r3, r2
 800272a:	2b08      	cmp	r3, #8
 800272c:	d11d      	bne.n	800276a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2209      	movs	r2, #9
 8002734:	4252      	negs	r2, r2
 8002736:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2204      	movs	r2, #4
 800273c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	2203      	movs	r2, #3
 8002746:	4013      	ands	r3, r2
 8002748:	d004      	beq.n	8002754 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	0018      	movs	r0, r3
 800274e:	f000 f8bd 	bl	80028cc <HAL_TIM_IC_CaptureCallback>
 8002752:	e007      	b.n	8002764 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	0018      	movs	r0, r3
 8002758:	f000 f8b0 	bl	80028bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	0018      	movs	r0, r3
 8002760:	f000 f8bc 	bl	80028dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2210      	movs	r2, #16
 8002772:	4013      	ands	r3, r2
 8002774:	2b10      	cmp	r3, #16
 8002776:	d125      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2210      	movs	r2, #16
 8002780:	4013      	ands	r3, r2
 8002782:	2b10      	cmp	r3, #16
 8002784:	d11e      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2211      	movs	r2, #17
 800278c:	4252      	negs	r2, r2
 800278e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2208      	movs	r2, #8
 8002794:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69da      	ldr	r2, [r3, #28]
 800279c:	23c0      	movs	r3, #192	; 0xc0
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4013      	ands	r3, r2
 80027a2:	d004      	beq.n	80027ae <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	0018      	movs	r0, r3
 80027a8:	f000 f890 	bl	80028cc <HAL_TIM_IC_CaptureCallback>
 80027ac:	e007      	b.n	80027be <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	0018      	movs	r0, r3
 80027b2:	f000 f883 	bl	80028bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	0018      	movs	r0, r3
 80027ba:	f000 f88f 	bl	80028dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2201      	movs	r2, #1
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d10f      	bne.n	80027f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2201      	movs	r2, #1
 80027da:	4013      	ands	r3, r2
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d108      	bne.n	80027f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2202      	movs	r2, #2
 80027e6:	4252      	negs	r2, r2
 80027e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f7fe f8c5 	bl	800097c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	2280      	movs	r2, #128	; 0x80
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b80      	cmp	r3, #128	; 0x80
 80027fe:	d10f      	bne.n	8002820 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	2280      	movs	r2, #128	; 0x80
 8002808:	4013      	ands	r3, r2
 800280a:	2b80      	cmp	r3, #128	; 0x80
 800280c:	d108      	bne.n	8002820 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2281      	movs	r2, #129	; 0x81
 8002814:	4252      	negs	r2, r2
 8002816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	0018      	movs	r0, r3
 800281c:	f000 f964 	bl	8002ae8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	401a      	ands	r2, r3
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	429a      	cmp	r2, r3
 8002832:	d10e      	bne.n	8002852 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2280      	movs	r2, #128	; 0x80
 800283c:	4013      	ands	r3, r2
 800283e:	2b80      	cmp	r3, #128	; 0x80
 8002840:	d107      	bne.n	8002852 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <HAL_TIM_IRQHandler+0x260>)
 8002848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	0018      	movs	r0, r3
 800284e:	f000 f953 	bl	8002af8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	2240      	movs	r2, #64	; 0x40
 800285a:	4013      	ands	r3, r2
 800285c:	2b40      	cmp	r3, #64	; 0x40
 800285e:	d10f      	bne.n	8002880 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	2240      	movs	r2, #64	; 0x40
 8002868:	4013      	ands	r3, r2
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d108      	bne.n	8002880 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2241      	movs	r2, #65	; 0x41
 8002874:	4252      	negs	r2, r2
 8002876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	0018      	movs	r0, r3
 800287c:	f000 f836 	bl	80028ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2220      	movs	r2, #32
 8002888:	4013      	ands	r3, r2
 800288a:	2b20      	cmp	r3, #32
 800288c:	d10f      	bne.n	80028ae <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2220      	movs	r2, #32
 8002896:	4013      	ands	r3, r2
 8002898:	2b20      	cmp	r3, #32
 800289a:	d108      	bne.n	80028ae <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2221      	movs	r2, #33	; 0x21
 80028a2:	4252      	negs	r2, r2
 80028a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f000 f915 	bl	8002ad8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b002      	add	sp, #8
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	fffffeff 	.word	0xfffffeff

080028bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028c4:	46c0      	nop			; (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b002      	add	sp, #8
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028e4:	46c0      	nop			; (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b002      	add	sp, #8
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028f4:	46c0      	nop			; (mov r8, r8)
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b002      	add	sp, #8
 80028fa:	bd80      	pop	{r7, pc}

080028fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a34      	ldr	r2, [pc, #208]	; (80029e0 <TIM_Base_SetConfig+0xe4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d008      	beq.n	8002926 <TIM_Base_SetConfig+0x2a>
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	2380      	movs	r3, #128	; 0x80
 8002918:	05db      	lsls	r3, r3, #23
 800291a:	429a      	cmp	r2, r3
 800291c:	d003      	beq.n	8002926 <TIM_Base_SetConfig+0x2a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a30      	ldr	r2, [pc, #192]	; (80029e4 <TIM_Base_SetConfig+0xe8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d108      	bne.n	8002938 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2270      	movs	r2, #112	; 0x70
 800292a:	4393      	bics	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a29      	ldr	r2, [pc, #164]	; (80029e0 <TIM_Base_SetConfig+0xe4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d018      	beq.n	8002972 <TIM_Base_SetConfig+0x76>
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	05db      	lsls	r3, r3, #23
 8002946:	429a      	cmp	r2, r3
 8002948:	d013      	beq.n	8002972 <TIM_Base_SetConfig+0x76>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a25      	ldr	r2, [pc, #148]	; (80029e4 <TIM_Base_SetConfig+0xe8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d00f      	beq.n	8002972 <TIM_Base_SetConfig+0x76>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a24      	ldr	r2, [pc, #144]	; (80029e8 <TIM_Base_SetConfig+0xec>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00b      	beq.n	8002972 <TIM_Base_SetConfig+0x76>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a23      	ldr	r2, [pc, #140]	; (80029ec <TIM_Base_SetConfig+0xf0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d007      	beq.n	8002972 <TIM_Base_SetConfig+0x76>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a22      	ldr	r2, [pc, #136]	; (80029f0 <TIM_Base_SetConfig+0xf4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d003      	beq.n	8002972 <TIM_Base_SetConfig+0x76>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a21      	ldr	r2, [pc, #132]	; (80029f4 <TIM_Base_SetConfig+0xf8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d108      	bne.n	8002984 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4a20      	ldr	r2, [pc, #128]	; (80029f8 <TIM_Base_SetConfig+0xfc>)
 8002976:	4013      	ands	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2280      	movs	r2, #128	; 0x80
 8002988:	4393      	bics	r3, r2
 800298a:	001a      	movs	r2, r3
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	4313      	orrs	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a0c      	ldr	r2, [pc, #48]	; (80029e0 <TIM_Base_SetConfig+0xe4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00b      	beq.n	80029ca <TIM_Base_SetConfig+0xce>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a0d      	ldr	r2, [pc, #52]	; (80029ec <TIM_Base_SetConfig+0xf0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d007      	beq.n	80029ca <TIM_Base_SetConfig+0xce>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a0c      	ldr	r2, [pc, #48]	; (80029f0 <TIM_Base_SetConfig+0xf4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d003      	beq.n	80029ca <TIM_Base_SetConfig+0xce>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <TIM_Base_SetConfig+0xf8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d103      	bne.n	80029d2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	615a      	str	r2, [r3, #20]
}
 80029d8:	46c0      	nop			; (mov r8, r8)
 80029da:	46bd      	mov	sp, r7
 80029dc:	b004      	add	sp, #16
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40012c00 	.word	0x40012c00
 80029e4:	40000400 	.word	0x40000400
 80029e8:	40002000 	.word	0x40002000
 80029ec:	40014000 	.word	0x40014000
 80029f0:	40014400 	.word	0x40014400
 80029f4:	40014800 	.word	0x40014800
 80029f8:	fffffcff 	.word	0xfffffcff

080029fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	223c      	movs	r2, #60	; 0x3c
 8002a0a:	5c9b      	ldrb	r3, [r3, r2]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e055      	b.n	8002ac0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	223c      	movs	r2, #60	; 0x3c
 8002a18:	2101      	movs	r1, #1
 8002a1a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	223d      	movs	r2, #61	; 0x3d
 8002a20:	2102      	movs	r1, #2
 8002a22:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a23      	ldr	r2, [pc, #140]	; (8002ac8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d108      	bne.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4a22      	ldr	r2, [pc, #136]	; (8002acc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2270      	movs	r2, #112	; 0x70
 8002a54:	4393      	bics	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a16      	ldr	r2, [pc, #88]	; (8002ac8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d00f      	beq.n	8002a94 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	05db      	lsls	r3, r3, #23
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d009      	beq.n	8002a94 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a12      	ldr	r2, [pc, #72]	; (8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d004      	beq.n	8002a94 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a11      	ldr	r2, [pc, #68]	; (8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d10c      	bne.n	8002aae <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2280      	movs	r2, #128	; 0x80
 8002a98:	4393      	bics	r3, r2
 8002a9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	223d      	movs	r2, #61	; 0x3d
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	223c      	movs	r2, #60	; 0x3c
 8002aba:	2100      	movs	r1, #0
 8002abc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b004      	add	sp, #16
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40012c00 	.word	0x40012c00
 8002acc:	ff0fffff 	.word	0xff0fffff
 8002ad0:	40000400 	.word	0x40000400
 8002ad4:	40014000 	.word	0x40014000

08002ad8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b002      	add	sp, #8
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002af0:	46c0      	nop			; (mov r8, r8)
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b002      	add	sp, #8
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b00:	46c0      	nop			; (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b002      	add	sp, #8
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e046      	b.n	8002ba8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2288      	movs	r2, #136	; 0x88
 8002b1e:	589b      	ldr	r3, [r3, r2]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2284      	movs	r2, #132	; 0x84
 8002b28:	2100      	movs	r1, #0
 8002b2a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f7fd ffd2 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2288      	movs	r2, #136	; 0x88
 8002b38:	2124      	movs	r1, #36	; 0x24
 8002b3a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2101      	movs	r1, #1
 8002b48:	438a      	bics	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f000 f8cc 	bl	8002cec <UART_SetConfig>
 8002b54:	0003      	movs	r3, r0
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e024      	b.n	8002ba8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f000 fb7d 	bl	8003268 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	490d      	ldr	r1, [pc, #52]	; (8002bb0 <HAL_UART_Init+0xa8>)
 8002b7a:	400a      	ands	r2, r1
 8002b7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	212a      	movs	r1, #42	; 0x2a
 8002b8a:	438a      	bics	r2, r1
 8002b8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2101      	movs	r1, #1
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f000 fc15 	bl	80033d0 <UART_CheckIdleState>
 8002ba6:	0003      	movs	r3, r0
}
 8002ba8:	0018      	movs	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b002      	add	sp, #8
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	ffffb7ff 	.word	0xffffb7ff

08002bb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08a      	sub	sp, #40	; 0x28
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	1dbb      	adds	r3, r7, #6
 8002bc2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2288      	movs	r2, #136	; 0x88
 8002bc8:	589b      	ldr	r3, [r3, r2]
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d000      	beq.n	8002bd0 <HAL_UART_Transmit+0x1c>
 8002bce:	e088      	b.n	8002ce2 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_UART_Transmit+0x2a>
 8002bd6:	1dbb      	adds	r3, r7, #6
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e080      	b.n	8002ce4 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	2380      	movs	r3, #128	; 0x80
 8002be8:	015b      	lsls	r3, r3, #5
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d109      	bne.n	8002c02 <HAL_UART_Transmit+0x4e>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d105      	bne.n	8002c02 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d001      	beq.n	8002c02 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e070      	b.n	8002ce4 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2290      	movs	r2, #144	; 0x90
 8002c06:	2100      	movs	r1, #0
 8002c08:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2288      	movs	r2, #136	; 0x88
 8002c0e:	2121      	movs	r1, #33	; 0x21
 8002c10:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c12:	f7fe f8a7 	bl	8000d64 <HAL_GetTick>
 8002c16:	0003      	movs	r3, r0
 8002c18:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1dba      	adds	r2, r7, #6
 8002c1e:	2154      	movs	r1, #84	; 0x54
 8002c20:	8812      	ldrh	r2, [r2, #0]
 8002c22:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1dba      	adds	r2, r7, #6
 8002c28:	2156      	movs	r1, #86	; 0x56
 8002c2a:	8812      	ldrh	r2, [r2, #0]
 8002c2c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	015b      	lsls	r3, r3, #5
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d108      	bne.n	8002c4c <HAL_UART_Transmit+0x98>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d104      	bne.n	8002c4c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	e003      	b.n	8002c54 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c54:	e02c      	b.n	8002cb0 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	0013      	movs	r3, r2
 8002c60:	2200      	movs	r2, #0
 8002c62:	2180      	movs	r1, #128	; 0x80
 8002c64:	f000 fc02 	bl	800346c <UART_WaitOnFlagUntilTimeout>
 8002c68:	1e03      	subs	r3, r0, #0
 8002c6a:	d001      	beq.n	8002c70 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e039      	b.n	8002ce4 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10b      	bne.n	8002c8e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	001a      	movs	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	05d2      	lsls	r2, r2, #23
 8002c82:	0dd2      	lsrs	r2, r2, #23
 8002c84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	3302      	adds	r3, #2
 8002c8a:	61bb      	str	r3, [r7, #24]
 8002c8c:	e007      	b.n	8002c9e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	781a      	ldrb	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2256      	movs	r2, #86	; 0x56
 8002ca2:	5a9b      	ldrh	r3, [r3, r2]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b299      	uxth	r1, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2256      	movs	r2, #86	; 0x56
 8002cae:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2256      	movs	r2, #86	; 0x56
 8002cb4:	5a9b      	ldrh	r3, [r3, r2]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1cc      	bne.n	8002c56 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	0013      	movs	r3, r2
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2140      	movs	r1, #64	; 0x40
 8002cca:	f000 fbcf 	bl	800346c <UART_WaitOnFlagUntilTimeout>
 8002cce:	1e03      	subs	r3, r0, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e006      	b.n	8002ce4 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2288      	movs	r2, #136	; 0x88
 8002cda:	2120      	movs	r1, #32
 8002cdc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e000      	b.n	8002ce4 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002ce2:	2302      	movs	r3, #2
  }
}
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b008      	add	sp, #32
 8002cea:	bd80      	pop	{r7, pc}

08002cec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cec:	b5b0      	push	{r4, r5, r7, lr}
 8002cee:	b090      	sub	sp, #64	; 0x40
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cf4:	231a      	movs	r3, #26
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	189b      	adds	r3, r3, r2
 8002cfa:	19db      	adds	r3, r3, r7
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4aaf      	ldr	r2, [pc, #700]	; (8002fdc <UART_SetConfig+0x2f0>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	0019      	movs	r1, r3
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d2a:	430b      	orrs	r3, r1
 8002d2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	4aaa      	ldr	r2, [pc, #680]	; (8002fe0 <UART_SetConfig+0x2f4>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	0018      	movs	r0, r3
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	68d9      	ldr	r1, [r3, #12]
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	0003      	movs	r3, r0
 8002d44:	430b      	orrs	r3, r1
 8002d46:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4aa4      	ldr	r2, [pc, #656]	; (8002fe4 <UART_SetConfig+0x2f8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d004      	beq.n	8002d62 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4a9f      	ldr	r2, [pc, #636]	; (8002fe8 <UART_SetConfig+0x2fc>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d74:	430b      	orrs	r3, r1
 8002d76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	220f      	movs	r2, #15
 8002d80:	4393      	bics	r3, r2
 8002d82:	0018      	movs	r0, r3
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	0003      	movs	r3, r0
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a95      	ldr	r2, [pc, #596]	; (8002fec <UART_SetConfig+0x300>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d131      	bne.n	8002e00 <UART_SetConfig+0x114>
 8002d9c:	4b94      	ldr	r3, [pc, #592]	; (8002ff0 <UART_SetConfig+0x304>)
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	2203      	movs	r2, #3
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d01d      	beq.n	8002de4 <UART_SetConfig+0xf8>
 8002da8:	d823      	bhi.n	8002df2 <UART_SetConfig+0x106>
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d00c      	beq.n	8002dc8 <UART_SetConfig+0xdc>
 8002dae:	d820      	bhi.n	8002df2 <UART_SetConfig+0x106>
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <UART_SetConfig+0xce>
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d00e      	beq.n	8002dd6 <UART_SetConfig+0xea>
 8002db8:	e01b      	b.n	8002df2 <UART_SetConfig+0x106>
 8002dba:	231b      	movs	r3, #27
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	189b      	adds	r3, r3, r2
 8002dc0:	19db      	adds	r3, r3, r7
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	e0b4      	b.n	8002f32 <UART_SetConfig+0x246>
 8002dc8:	231b      	movs	r3, #27
 8002dca:	2220      	movs	r2, #32
 8002dcc:	189b      	adds	r3, r3, r2
 8002dce:	19db      	adds	r3, r3, r7
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	701a      	strb	r2, [r3, #0]
 8002dd4:	e0ad      	b.n	8002f32 <UART_SetConfig+0x246>
 8002dd6:	231b      	movs	r3, #27
 8002dd8:	2220      	movs	r2, #32
 8002dda:	189b      	adds	r3, r3, r2
 8002ddc:	19db      	adds	r3, r3, r7
 8002dde:	2204      	movs	r2, #4
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	e0a6      	b.n	8002f32 <UART_SetConfig+0x246>
 8002de4:	231b      	movs	r3, #27
 8002de6:	2220      	movs	r2, #32
 8002de8:	189b      	adds	r3, r3, r2
 8002dea:	19db      	adds	r3, r3, r7
 8002dec:	2208      	movs	r2, #8
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	e09f      	b.n	8002f32 <UART_SetConfig+0x246>
 8002df2:	231b      	movs	r3, #27
 8002df4:	2220      	movs	r2, #32
 8002df6:	189b      	adds	r3, r3, r2
 8002df8:	19db      	adds	r3, r3, r7
 8002dfa:	2210      	movs	r2, #16
 8002dfc:	701a      	strb	r2, [r3, #0]
 8002dfe:	e098      	b.n	8002f32 <UART_SetConfig+0x246>
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a7b      	ldr	r2, [pc, #492]	; (8002ff4 <UART_SetConfig+0x308>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d131      	bne.n	8002e6e <UART_SetConfig+0x182>
 8002e0a:	4b79      	ldr	r3, [pc, #484]	; (8002ff0 <UART_SetConfig+0x304>)
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0e:	220c      	movs	r2, #12
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b0c      	cmp	r3, #12
 8002e14:	d01d      	beq.n	8002e52 <UART_SetConfig+0x166>
 8002e16:	d823      	bhi.n	8002e60 <UART_SetConfig+0x174>
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d00c      	beq.n	8002e36 <UART_SetConfig+0x14a>
 8002e1c:	d820      	bhi.n	8002e60 <UART_SetConfig+0x174>
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <UART_SetConfig+0x13c>
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d00e      	beq.n	8002e44 <UART_SetConfig+0x158>
 8002e26:	e01b      	b.n	8002e60 <UART_SetConfig+0x174>
 8002e28:	231b      	movs	r3, #27
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	189b      	adds	r3, r3, r2
 8002e2e:	19db      	adds	r3, r3, r7
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
 8002e34:	e07d      	b.n	8002f32 <UART_SetConfig+0x246>
 8002e36:	231b      	movs	r3, #27
 8002e38:	2220      	movs	r2, #32
 8002e3a:	189b      	adds	r3, r3, r2
 8002e3c:	19db      	adds	r3, r3, r7
 8002e3e:	2202      	movs	r2, #2
 8002e40:	701a      	strb	r2, [r3, #0]
 8002e42:	e076      	b.n	8002f32 <UART_SetConfig+0x246>
 8002e44:	231b      	movs	r3, #27
 8002e46:	2220      	movs	r2, #32
 8002e48:	189b      	adds	r3, r3, r2
 8002e4a:	19db      	adds	r3, r3, r7
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	e06f      	b.n	8002f32 <UART_SetConfig+0x246>
 8002e52:	231b      	movs	r3, #27
 8002e54:	2220      	movs	r2, #32
 8002e56:	189b      	adds	r3, r3, r2
 8002e58:	19db      	adds	r3, r3, r7
 8002e5a:	2208      	movs	r2, #8
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	e068      	b.n	8002f32 <UART_SetConfig+0x246>
 8002e60:	231b      	movs	r3, #27
 8002e62:	2220      	movs	r2, #32
 8002e64:	189b      	adds	r3, r3, r2
 8002e66:	19db      	adds	r3, r3, r7
 8002e68:	2210      	movs	r2, #16
 8002e6a:	701a      	strb	r2, [r3, #0]
 8002e6c:	e061      	b.n	8002f32 <UART_SetConfig+0x246>
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a61      	ldr	r2, [pc, #388]	; (8002ff8 <UART_SetConfig+0x30c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d106      	bne.n	8002e86 <UART_SetConfig+0x19a>
 8002e78:	231b      	movs	r3, #27
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	189b      	adds	r3, r3, r2
 8002e7e:	19db      	adds	r3, r3, r7
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
 8002e84:	e055      	b.n	8002f32 <UART_SetConfig+0x246>
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a5c      	ldr	r2, [pc, #368]	; (8002ffc <UART_SetConfig+0x310>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d106      	bne.n	8002e9e <UART_SetConfig+0x1b2>
 8002e90:	231b      	movs	r3, #27
 8002e92:	2220      	movs	r2, #32
 8002e94:	189b      	adds	r3, r3, r2
 8002e96:	19db      	adds	r3, r3, r7
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
 8002e9c:	e049      	b.n	8002f32 <UART_SetConfig+0x246>
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a50      	ldr	r2, [pc, #320]	; (8002fe4 <UART_SetConfig+0x2f8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d13e      	bne.n	8002f26 <UART_SetConfig+0x23a>
 8002ea8:	4b51      	ldr	r3, [pc, #324]	; (8002ff0 <UART_SetConfig+0x304>)
 8002eaa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eac:	23c0      	movs	r3, #192	; 0xc0
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	22c0      	movs	r2, #192	; 0xc0
 8002eb4:	0112      	lsls	r2, r2, #4
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d027      	beq.n	8002f0a <UART_SetConfig+0x21e>
 8002eba:	22c0      	movs	r2, #192	; 0xc0
 8002ebc:	0112      	lsls	r2, r2, #4
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d82a      	bhi.n	8002f18 <UART_SetConfig+0x22c>
 8002ec2:	2280      	movs	r2, #128	; 0x80
 8002ec4:	0112      	lsls	r2, r2, #4
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d011      	beq.n	8002eee <UART_SetConfig+0x202>
 8002eca:	2280      	movs	r2, #128	; 0x80
 8002ecc:	0112      	lsls	r2, r2, #4
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d822      	bhi.n	8002f18 <UART_SetConfig+0x22c>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d004      	beq.n	8002ee0 <UART_SetConfig+0x1f4>
 8002ed6:	2280      	movs	r2, #128	; 0x80
 8002ed8:	00d2      	lsls	r2, r2, #3
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00e      	beq.n	8002efc <UART_SetConfig+0x210>
 8002ede:	e01b      	b.n	8002f18 <UART_SetConfig+0x22c>
 8002ee0:	231b      	movs	r3, #27
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	189b      	adds	r3, r3, r2
 8002ee6:	19db      	adds	r3, r3, r7
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
 8002eec:	e021      	b.n	8002f32 <UART_SetConfig+0x246>
 8002eee:	231b      	movs	r3, #27
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	189b      	adds	r3, r3, r2
 8002ef4:	19db      	adds	r3, r3, r7
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	701a      	strb	r2, [r3, #0]
 8002efa:	e01a      	b.n	8002f32 <UART_SetConfig+0x246>
 8002efc:	231b      	movs	r3, #27
 8002efe:	2220      	movs	r2, #32
 8002f00:	189b      	adds	r3, r3, r2
 8002f02:	19db      	adds	r3, r3, r7
 8002f04:	2204      	movs	r2, #4
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	e013      	b.n	8002f32 <UART_SetConfig+0x246>
 8002f0a:	231b      	movs	r3, #27
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	189b      	adds	r3, r3, r2
 8002f10:	19db      	adds	r3, r3, r7
 8002f12:	2208      	movs	r2, #8
 8002f14:	701a      	strb	r2, [r3, #0]
 8002f16:	e00c      	b.n	8002f32 <UART_SetConfig+0x246>
 8002f18:	231b      	movs	r3, #27
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	189b      	adds	r3, r3, r2
 8002f1e:	19db      	adds	r3, r3, r7
 8002f20:	2210      	movs	r2, #16
 8002f22:	701a      	strb	r2, [r3, #0]
 8002f24:	e005      	b.n	8002f32 <UART_SetConfig+0x246>
 8002f26:	231b      	movs	r3, #27
 8002f28:	2220      	movs	r2, #32
 8002f2a:	189b      	adds	r3, r3, r2
 8002f2c:	19db      	adds	r3, r3, r7
 8002f2e:	2210      	movs	r2, #16
 8002f30:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a2b      	ldr	r2, [pc, #172]	; (8002fe4 <UART_SetConfig+0x2f8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d000      	beq.n	8002f3e <UART_SetConfig+0x252>
 8002f3c:	e0a9      	b.n	8003092 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f3e:	231b      	movs	r3, #27
 8002f40:	2220      	movs	r2, #32
 8002f42:	189b      	adds	r3, r3, r2
 8002f44:	19db      	adds	r3, r3, r7
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d015      	beq.n	8002f78 <UART_SetConfig+0x28c>
 8002f4c:	dc18      	bgt.n	8002f80 <UART_SetConfig+0x294>
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d00d      	beq.n	8002f6e <UART_SetConfig+0x282>
 8002f52:	dc15      	bgt.n	8002f80 <UART_SetConfig+0x294>
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <UART_SetConfig+0x272>
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d005      	beq.n	8002f68 <UART_SetConfig+0x27c>
 8002f5c:	e010      	b.n	8002f80 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f5e:	f7fe fee9 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 8002f62:	0003      	movs	r3, r0
 8002f64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f66:	e014      	b.n	8002f92 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f68:	4b25      	ldr	r3, [pc, #148]	; (8003000 <UART_SetConfig+0x314>)
 8002f6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f6c:	e011      	b.n	8002f92 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f6e:	f7fe fe55 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8002f72:	0003      	movs	r3, r0
 8002f74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f76:	e00c      	b.n	8002f92 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	021b      	lsls	r3, r3, #8
 8002f7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f7e:	e008      	b.n	8002f92 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002f84:	231a      	movs	r3, #26
 8002f86:	2220      	movs	r2, #32
 8002f88:	189b      	adds	r3, r3, r2
 8002f8a:	19db      	adds	r3, r3, r7
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	701a      	strb	r2, [r3, #0]
        break;
 8002f90:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d100      	bne.n	8002f9a <UART_SetConfig+0x2ae>
 8002f98:	e14b      	b.n	8003232 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <UART_SetConfig+0x318>)
 8002fa0:	0052      	lsls	r2, r2, #1
 8002fa2:	5ad3      	ldrh	r3, [r2, r3]
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002fa8:	f7fd f8b4 	bl	8000114 <__udivsi3>
 8002fac:	0003      	movs	r3, r0
 8002fae:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	0013      	movs	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	189b      	adds	r3, r3, r2
 8002fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d305      	bcc.n	8002fcc <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d91d      	bls.n	8003008 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002fcc:	231a      	movs	r3, #26
 8002fce:	2220      	movs	r2, #32
 8002fd0:	189b      	adds	r3, r3, r2
 8002fd2:	19db      	adds	r3, r3, r7
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	701a      	strb	r2, [r3, #0]
 8002fd8:	e12b      	b.n	8003232 <UART_SetConfig+0x546>
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	cfff69f3 	.word	0xcfff69f3
 8002fe0:	ffffcfff 	.word	0xffffcfff
 8002fe4:	40008000 	.word	0x40008000
 8002fe8:	11fff4ff 	.word	0x11fff4ff
 8002fec:	40013800 	.word	0x40013800
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40004400 	.word	0x40004400
 8002ff8:	40004800 	.word	0x40004800
 8002ffc:	40004c00 	.word	0x40004c00
 8003000:	00f42400 	.word	0x00f42400
 8003004:	08003900 	.word	0x08003900
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300a:	61bb      	str	r3, [r7, #24]
 800300c:	2300      	movs	r3, #0
 800300e:	61fb      	str	r3, [r7, #28]
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003014:	4b92      	ldr	r3, [pc, #584]	; (8003260 <UART_SetConfig+0x574>)
 8003016:	0052      	lsls	r2, r2, #1
 8003018:	5ad3      	ldrh	r3, [r2, r3]
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	69b8      	ldr	r0, [r7, #24]
 8003026:	69f9      	ldr	r1, [r7, #28]
 8003028:	f7fd f9ea 	bl	8000400 <__aeabi_uldivmod>
 800302c:	0002      	movs	r2, r0
 800302e:	000b      	movs	r3, r1
 8003030:	0e11      	lsrs	r1, r2, #24
 8003032:	021d      	lsls	r5, r3, #8
 8003034:	430d      	orrs	r5, r1
 8003036:	0214      	lsls	r4, r2, #8
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	60bb      	str	r3, [r7, #8]
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68b8      	ldr	r0, [r7, #8]
 8003046:	68f9      	ldr	r1, [r7, #12]
 8003048:	1900      	adds	r0, r0, r4
 800304a:	4169      	adcs	r1, r5
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	603b      	str	r3, [r7, #0]
 8003052:	2300      	movs	r3, #0
 8003054:	607b      	str	r3, [r7, #4]
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f7fd f9d1 	bl	8000400 <__aeabi_uldivmod>
 800305e:	0002      	movs	r2, r0
 8003060:	000b      	movs	r3, r1
 8003062:	0013      	movs	r3, r2
 8003064:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003068:	23c0      	movs	r3, #192	; 0xc0
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	429a      	cmp	r2, r3
 800306e:	d309      	bcc.n	8003084 <UART_SetConfig+0x398>
 8003070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003072:	2380      	movs	r3, #128	; 0x80
 8003074:	035b      	lsls	r3, r3, #13
 8003076:	429a      	cmp	r2, r3
 8003078:	d204      	bcs.n	8003084 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	e0d6      	b.n	8003232 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003084:	231a      	movs	r3, #26
 8003086:	2220      	movs	r2, #32
 8003088:	189b      	adds	r3, r3, r2
 800308a:	19db      	adds	r3, r3, r7
 800308c:	2201      	movs	r2, #1
 800308e:	701a      	strb	r2, [r3, #0]
 8003090:	e0cf      	b.n	8003232 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	69da      	ldr	r2, [r3, #28]
 8003096:	2380      	movs	r3, #128	; 0x80
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	429a      	cmp	r2, r3
 800309c:	d000      	beq.n	80030a0 <UART_SetConfig+0x3b4>
 800309e:	e070      	b.n	8003182 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80030a0:	231b      	movs	r3, #27
 80030a2:	2220      	movs	r2, #32
 80030a4:	189b      	adds	r3, r3, r2
 80030a6:	19db      	adds	r3, r3, r7
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d015      	beq.n	80030da <UART_SetConfig+0x3ee>
 80030ae:	dc18      	bgt.n	80030e2 <UART_SetConfig+0x3f6>
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d00d      	beq.n	80030d0 <UART_SetConfig+0x3e4>
 80030b4:	dc15      	bgt.n	80030e2 <UART_SetConfig+0x3f6>
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <UART_SetConfig+0x3d4>
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d005      	beq.n	80030ca <UART_SetConfig+0x3de>
 80030be:	e010      	b.n	80030e2 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030c0:	f7fe fe38 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 80030c4:	0003      	movs	r3, r0
 80030c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030c8:	e014      	b.n	80030f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030ca:	4b66      	ldr	r3, [pc, #408]	; (8003264 <UART_SetConfig+0x578>)
 80030cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030ce:	e011      	b.n	80030f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030d0:	f7fe fda4 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 80030d4:	0003      	movs	r3, r0
 80030d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030d8:	e00c      	b.n	80030f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030da:	2380      	movs	r3, #128	; 0x80
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030e0:	e008      	b.n	80030f4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80030e6:	231a      	movs	r3, #26
 80030e8:	2220      	movs	r2, #32
 80030ea:	189b      	adds	r3, r3, r2
 80030ec:	19db      	adds	r3, r3, r7
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
        break;
 80030f2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d100      	bne.n	80030fc <UART_SetConfig+0x410>
 80030fa:	e09a      	b.n	8003232 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003100:	4b57      	ldr	r3, [pc, #348]	; (8003260 <UART_SetConfig+0x574>)
 8003102:	0052      	lsls	r2, r2, #1
 8003104:	5ad3      	ldrh	r3, [r2, r3]
 8003106:	0019      	movs	r1, r3
 8003108:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800310a:	f7fd f803 	bl	8000114 <__udivsi3>
 800310e:	0003      	movs	r3, r0
 8003110:	005a      	lsls	r2, r3, #1
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	085b      	lsrs	r3, r3, #1
 8003118:	18d2      	adds	r2, r2, r3
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	0019      	movs	r1, r3
 8003120:	0010      	movs	r0, r2
 8003122:	f7fc fff7 	bl	8000114 <__udivsi3>
 8003126:	0003      	movs	r3, r0
 8003128:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800312a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312c:	2b0f      	cmp	r3, #15
 800312e:	d921      	bls.n	8003174 <UART_SetConfig+0x488>
 8003130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003132:	2380      	movs	r3, #128	; 0x80
 8003134:	025b      	lsls	r3, r3, #9
 8003136:	429a      	cmp	r2, r3
 8003138:	d21c      	bcs.n	8003174 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313c:	b29a      	uxth	r2, r3
 800313e:	200e      	movs	r0, #14
 8003140:	2420      	movs	r4, #32
 8003142:	1903      	adds	r3, r0, r4
 8003144:	19db      	adds	r3, r3, r7
 8003146:	210f      	movs	r1, #15
 8003148:	438a      	bics	r2, r1
 800314a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	085b      	lsrs	r3, r3, #1
 8003150:	b29b      	uxth	r3, r3
 8003152:	2207      	movs	r2, #7
 8003154:	4013      	ands	r3, r2
 8003156:	b299      	uxth	r1, r3
 8003158:	1903      	adds	r3, r0, r4
 800315a:	19db      	adds	r3, r3, r7
 800315c:	1902      	adds	r2, r0, r4
 800315e:	19d2      	adds	r2, r2, r7
 8003160:	8812      	ldrh	r2, [r2, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	1902      	adds	r2, r0, r4
 800316c:	19d2      	adds	r2, r2, r7
 800316e:	8812      	ldrh	r2, [r2, #0]
 8003170:	60da      	str	r2, [r3, #12]
 8003172:	e05e      	b.n	8003232 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003174:	231a      	movs	r3, #26
 8003176:	2220      	movs	r2, #32
 8003178:	189b      	adds	r3, r3, r2
 800317a:	19db      	adds	r3, r3, r7
 800317c:	2201      	movs	r2, #1
 800317e:	701a      	strb	r2, [r3, #0]
 8003180:	e057      	b.n	8003232 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003182:	231b      	movs	r3, #27
 8003184:	2220      	movs	r2, #32
 8003186:	189b      	adds	r3, r3, r2
 8003188:	19db      	adds	r3, r3, r7
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b08      	cmp	r3, #8
 800318e:	d015      	beq.n	80031bc <UART_SetConfig+0x4d0>
 8003190:	dc18      	bgt.n	80031c4 <UART_SetConfig+0x4d8>
 8003192:	2b04      	cmp	r3, #4
 8003194:	d00d      	beq.n	80031b2 <UART_SetConfig+0x4c6>
 8003196:	dc15      	bgt.n	80031c4 <UART_SetConfig+0x4d8>
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <UART_SetConfig+0x4b6>
 800319c:	2b02      	cmp	r3, #2
 800319e:	d005      	beq.n	80031ac <UART_SetConfig+0x4c0>
 80031a0:	e010      	b.n	80031c4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a2:	f7fe fdc7 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 80031a6:	0003      	movs	r3, r0
 80031a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031aa:	e014      	b.n	80031d6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031ac:	4b2d      	ldr	r3, [pc, #180]	; (8003264 <UART_SetConfig+0x578>)
 80031ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031b0:	e011      	b.n	80031d6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031b2:	f7fe fd33 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 80031b6:	0003      	movs	r3, r0
 80031b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031ba:	e00c      	b.n	80031d6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031c2:	e008      	b.n	80031d6 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80031c8:	231a      	movs	r3, #26
 80031ca:	2220      	movs	r2, #32
 80031cc:	189b      	adds	r3, r3, r2
 80031ce:	19db      	adds	r3, r3, r7
 80031d0:	2201      	movs	r2, #1
 80031d2:	701a      	strb	r2, [r3, #0]
        break;
 80031d4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80031d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d02a      	beq.n	8003232 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031e0:	4b1f      	ldr	r3, [pc, #124]	; (8003260 <UART_SetConfig+0x574>)
 80031e2:	0052      	lsls	r2, r2, #1
 80031e4:	5ad3      	ldrh	r3, [r2, r3]
 80031e6:	0019      	movs	r1, r3
 80031e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031ea:	f7fc ff93 	bl	8000114 <__udivsi3>
 80031ee:	0003      	movs	r3, r0
 80031f0:	001a      	movs	r2, r3
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	085b      	lsrs	r3, r3, #1
 80031f8:	18d2      	adds	r2, r2, r3
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	0019      	movs	r1, r3
 8003200:	0010      	movs	r0, r2
 8003202:	f7fc ff87 	bl	8000114 <__udivsi3>
 8003206:	0003      	movs	r3, r0
 8003208:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	2b0f      	cmp	r3, #15
 800320e:	d90a      	bls.n	8003226 <UART_SetConfig+0x53a>
 8003210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	025b      	lsls	r3, r3, #9
 8003216:	429a      	cmp	r2, r3
 8003218:	d205      	bcs.n	8003226 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	b29a      	uxth	r2, r3
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60da      	str	r2, [r3, #12]
 8003224:	e005      	b.n	8003232 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003226:	231a      	movs	r3, #26
 8003228:	2220      	movs	r2, #32
 800322a:	189b      	adds	r3, r3, r2
 800322c:	19db      	adds	r3, r3, r7
 800322e:	2201      	movs	r2, #1
 8003230:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	226a      	movs	r2, #106	; 0x6a
 8003236:	2101      	movs	r1, #1
 8003238:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	2268      	movs	r2, #104	; 0x68
 800323e:	2101      	movs	r1, #1
 8003240:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	2200      	movs	r2, #0
 8003246:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	2200      	movs	r2, #0
 800324c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800324e:	231a      	movs	r3, #26
 8003250:	2220      	movs	r2, #32
 8003252:	189b      	adds	r3, r3, r2
 8003254:	19db      	adds	r3, r3, r7
 8003256:	781b      	ldrb	r3, [r3, #0]
}
 8003258:	0018      	movs	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	b010      	add	sp, #64	; 0x40
 800325e:	bdb0      	pop	{r4, r5, r7, pc}
 8003260:	08003900 	.word	0x08003900
 8003264:	00f42400 	.word	0x00f42400

08003268 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	2201      	movs	r2, #1
 8003276:	4013      	ands	r3, r2
 8003278:	d00b      	beq.n	8003292 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	4a4a      	ldr	r2, [pc, #296]	; (80033ac <UART_AdvFeatureConfig+0x144>)
 8003282:	4013      	ands	r3, r2
 8003284:	0019      	movs	r1, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	2202      	movs	r2, #2
 8003298:	4013      	ands	r3, r2
 800329a:	d00b      	beq.n	80032b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	4a43      	ldr	r2, [pc, #268]	; (80033b0 <UART_AdvFeatureConfig+0x148>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	0019      	movs	r1, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b8:	2204      	movs	r2, #4
 80032ba:	4013      	ands	r3, r2
 80032bc:	d00b      	beq.n	80032d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4a3b      	ldr	r2, [pc, #236]	; (80033b4 <UART_AdvFeatureConfig+0x14c>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	0019      	movs	r1, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032da:	2208      	movs	r2, #8
 80032dc:	4013      	ands	r3, r2
 80032de:	d00b      	beq.n	80032f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	4a34      	ldr	r2, [pc, #208]	; (80033b8 <UART_AdvFeatureConfig+0x150>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	0019      	movs	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fc:	2210      	movs	r2, #16
 80032fe:	4013      	ands	r3, r2
 8003300:	d00b      	beq.n	800331a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	4a2c      	ldr	r2, [pc, #176]	; (80033bc <UART_AdvFeatureConfig+0x154>)
 800330a:	4013      	ands	r3, r2
 800330c:	0019      	movs	r1, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	2220      	movs	r2, #32
 8003320:	4013      	ands	r3, r2
 8003322:	d00b      	beq.n	800333c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	4a25      	ldr	r2, [pc, #148]	; (80033c0 <UART_AdvFeatureConfig+0x158>)
 800332c:	4013      	ands	r3, r2
 800332e:	0019      	movs	r1, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	2240      	movs	r2, #64	; 0x40
 8003342:	4013      	ands	r3, r2
 8003344:	d01d      	beq.n	8003382 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <UART_AdvFeatureConfig+0x15c>)
 800334e:	4013      	ands	r3, r2
 8003350:	0019      	movs	r1, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003362:	2380      	movs	r3, #128	; 0x80
 8003364:	035b      	lsls	r3, r3, #13
 8003366:	429a      	cmp	r2, r3
 8003368:	d10b      	bne.n	8003382 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	4a15      	ldr	r2, [pc, #84]	; (80033c8 <UART_AdvFeatureConfig+0x160>)
 8003372:	4013      	ands	r3, r2
 8003374:	0019      	movs	r1, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	2280      	movs	r2, #128	; 0x80
 8003388:	4013      	ands	r3, r2
 800338a:	d00b      	beq.n	80033a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	4a0e      	ldr	r2, [pc, #56]	; (80033cc <UART_AdvFeatureConfig+0x164>)
 8003394:	4013      	ands	r3, r2
 8003396:	0019      	movs	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]
  }
}
 80033a4:	46c0      	nop			; (mov r8, r8)
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b002      	add	sp, #8
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	fffdffff 	.word	0xfffdffff
 80033b0:	fffeffff 	.word	0xfffeffff
 80033b4:	fffbffff 	.word	0xfffbffff
 80033b8:	ffff7fff 	.word	0xffff7fff
 80033bc:	ffffefff 	.word	0xffffefff
 80033c0:	ffffdfff 	.word	0xffffdfff
 80033c4:	ffefffff 	.word	0xffefffff
 80033c8:	ff9fffff 	.word	0xff9fffff
 80033cc:	fff7ffff 	.word	0xfff7ffff

080033d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2290      	movs	r2, #144	; 0x90
 80033dc:	2100      	movs	r1, #0
 80033de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033e0:	f7fd fcc0 	bl	8000d64 <HAL_GetTick>
 80033e4:	0003      	movs	r3, r0
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2208      	movs	r2, #8
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d10c      	bne.n	8003410 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2280      	movs	r2, #128	; 0x80
 80033fa:	0391      	lsls	r1, r2, #14
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	4a1a      	ldr	r2, [pc, #104]	; (8003468 <UART_CheckIdleState+0x98>)
 8003400:	9200      	str	r2, [sp, #0]
 8003402:	2200      	movs	r2, #0
 8003404:	f000 f832 	bl	800346c <UART_WaitOnFlagUntilTimeout>
 8003408:	1e03      	subs	r3, r0, #0
 800340a:	d001      	beq.n	8003410 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e026      	b.n	800345e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2204      	movs	r2, #4
 8003418:	4013      	ands	r3, r2
 800341a:	2b04      	cmp	r3, #4
 800341c:	d10c      	bne.n	8003438 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2280      	movs	r2, #128	; 0x80
 8003422:	03d1      	lsls	r1, r2, #15
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	4a10      	ldr	r2, [pc, #64]	; (8003468 <UART_CheckIdleState+0x98>)
 8003428:	9200      	str	r2, [sp, #0]
 800342a:	2200      	movs	r2, #0
 800342c:	f000 f81e 	bl	800346c <UART_WaitOnFlagUntilTimeout>
 8003430:	1e03      	subs	r3, r0, #0
 8003432:	d001      	beq.n	8003438 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e012      	b.n	800345e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2288      	movs	r2, #136	; 0x88
 800343c:	2120      	movs	r1, #32
 800343e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	228c      	movs	r2, #140	; 0x8c
 8003444:	2120      	movs	r1, #32
 8003446:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2284      	movs	r2, #132	; 0x84
 8003458:	2100      	movs	r1, #0
 800345a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	0018      	movs	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	b004      	add	sp, #16
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	01ffffff 	.word	0x01ffffff

0800346c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b094      	sub	sp, #80	; 0x50
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	1dfb      	adds	r3, r7, #7
 800347a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800347c:	e0a7      	b.n	80035ce <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003480:	3301      	adds	r3, #1
 8003482:	d100      	bne.n	8003486 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003484:	e0a3      	b.n	80035ce <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003486:	f7fd fc6d 	bl	8000d64 <HAL_GetTick>
 800348a:	0002      	movs	r2, r0
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003492:	429a      	cmp	r2, r3
 8003494:	d302      	bcc.n	800349c <UART_WaitOnFlagUntilTimeout+0x30>
 8003496:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003498:	2b00      	cmp	r3, #0
 800349a:	d13f      	bne.n	800351c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349c:	f3ef 8310 	mrs	r3, PRIMASK
 80034a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80034a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80034a4:	647b      	str	r3, [r7, #68]	; 0x44
 80034a6:	2301      	movs	r3, #1
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ac:	f383 8810 	msr	PRIMASK, r3
}
 80034b0:	46c0      	nop			; (mov r8, r8)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	494e      	ldr	r1, [pc, #312]	; (80035f8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80034be:	400a      	ands	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034c4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	f383 8810 	msr	PRIMASK, r3
}
 80034cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ce:	f3ef 8310 	mrs	r3, PRIMASK
 80034d2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80034d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d6:	643b      	str	r3, [r7, #64]	; 0x40
 80034d8:	2301      	movs	r3, #1
 80034da:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034de:	f383 8810 	msr	PRIMASK, r3
}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2101      	movs	r1, #1
 80034f0:	438a      	bics	r2, r1
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fa:	f383 8810 	msr	PRIMASK, r3
}
 80034fe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2288      	movs	r2, #136	; 0x88
 8003504:	2120      	movs	r1, #32
 8003506:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	228c      	movs	r2, #140	; 0x8c
 800350c:	2120      	movs	r1, #32
 800350e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2284      	movs	r2, #132	; 0x84
 8003514:	2100      	movs	r1, #0
 8003516:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e069      	b.n	80035f0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2204      	movs	r2, #4
 8003524:	4013      	ands	r3, r2
 8003526:	d052      	beq.n	80035ce <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	69da      	ldr	r2, [r3, #28]
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	401a      	ands	r2, r3
 8003534:	2380      	movs	r3, #128	; 0x80
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	429a      	cmp	r2, r3
 800353a:	d148      	bne.n	80035ce <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2280      	movs	r2, #128	; 0x80
 8003542:	0112      	lsls	r2, r2, #4
 8003544:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003546:	f3ef 8310 	mrs	r3, PRIMASK
 800354a:	613b      	str	r3, [r7, #16]
  return(result);
 800354c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800354e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003550:	2301      	movs	r3, #1
 8003552:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f383 8810 	msr	PRIMASK, r3
}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4924      	ldr	r1, [pc, #144]	; (80035f8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003568:	400a      	ands	r2, r1
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800356e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f383 8810 	msr	PRIMASK, r3
}
 8003576:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003578:	f3ef 8310 	mrs	r3, PRIMASK
 800357c:	61fb      	str	r3, [r7, #28]
  return(result);
 800357e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003580:	64bb      	str	r3, [r7, #72]	; 0x48
 8003582:	2301      	movs	r3, #1
 8003584:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	f383 8810 	msr	PRIMASK, r3
}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2101      	movs	r1, #1
 800359a:	438a      	bics	r2, r1
 800359c:	609a      	str	r2, [r3, #8]
 800359e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	f383 8810 	msr	PRIMASK, r3
}
 80035a8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2288      	movs	r2, #136	; 0x88
 80035ae:	2120      	movs	r1, #32
 80035b0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	228c      	movs	r2, #140	; 0x8c
 80035b6:	2120      	movs	r1, #32
 80035b8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2290      	movs	r2, #144	; 0x90
 80035be:	2120      	movs	r1, #32
 80035c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2284      	movs	r2, #132	; 0x84
 80035c6:	2100      	movs	r1, #0
 80035c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e010      	b.n	80035f0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	4013      	ands	r3, r2
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	425a      	negs	r2, r3
 80035de:	4153      	adcs	r3, r2
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	001a      	movs	r2, r3
 80035e4:	1dfb      	adds	r3, r7, #7
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d100      	bne.n	80035ee <UART_WaitOnFlagUntilTimeout+0x182>
 80035ec:	e747      	b.n	800347e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	0018      	movs	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b014      	add	sp, #80	; 0x50
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	fffffe5f 	.word	0xfffffe5f

080035fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2284      	movs	r2, #132	; 0x84
 8003608:	5c9b      	ldrb	r3, [r3, r2]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_UARTEx_DisableFifoMode+0x16>
 800360e:	2302      	movs	r3, #2
 8003610:	e027      	b.n	8003662 <HAL_UARTEx_DisableFifoMode+0x66>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2284      	movs	r2, #132	; 0x84
 8003616:	2101      	movs	r1, #1
 8003618:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2288      	movs	r2, #136	; 0x88
 800361e:	2124      	movs	r1, #36	; 0x24
 8003620:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2101      	movs	r1, #1
 8003636:	438a      	bics	r2, r1
 8003638:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4a0b      	ldr	r2, [pc, #44]	; (800366c <HAL_UARTEx_DisableFifoMode+0x70>)
 800363e:	4013      	ands	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2288      	movs	r2, #136	; 0x88
 8003654:	2120      	movs	r1, #32
 8003656:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2284      	movs	r2, #132	; 0x84
 800365c:	2100      	movs	r1, #0
 800365e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	0018      	movs	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	b004      	add	sp, #16
 8003668:	bd80      	pop	{r7, pc}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	dfffffff 	.word	0xdfffffff

08003670 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2284      	movs	r2, #132	; 0x84
 800367e:	5c9b      	ldrb	r3, [r3, r2]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003684:	2302      	movs	r3, #2
 8003686:	e02e      	b.n	80036e6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2284      	movs	r2, #132	; 0x84
 800368c:	2101      	movs	r1, #1
 800368e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2288      	movs	r2, #136	; 0x88
 8003694:	2124      	movs	r1, #36	; 0x24
 8003696:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2101      	movs	r1, #1
 80036ac:	438a      	bics	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	08d9      	lsrs	r1, r3, #3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	0018      	movs	r0, r3
 80036c8:	f000 f854 	bl	8003774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2288      	movs	r2, #136	; 0x88
 80036d8:	2120      	movs	r1, #32
 80036da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2284      	movs	r2, #132	; 0x84
 80036e0:	2100      	movs	r1, #0
 80036e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	0018      	movs	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b004      	add	sp, #16
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2284      	movs	r2, #132	; 0x84
 80036fe:	5c9b      	ldrb	r3, [r3, r2]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003704:	2302      	movs	r3, #2
 8003706:	e02f      	b.n	8003768 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2284      	movs	r2, #132	; 0x84
 800370c:	2101      	movs	r1, #1
 800370e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2288      	movs	r2, #136	; 0x88
 8003714:	2124      	movs	r1, #36	; 0x24
 8003716:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2101      	movs	r1, #1
 800372c:	438a      	bics	r2, r1
 800372e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	4a0e      	ldr	r2, [pc, #56]	; (8003770 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003738:	4013      	ands	r3, r2
 800373a:	0019      	movs	r1, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	0018      	movs	r0, r3
 800374a:	f000 f813 	bl	8003774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2288      	movs	r2, #136	; 0x88
 800375a:	2120      	movs	r1, #32
 800375c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2284      	movs	r2, #132	; 0x84
 8003762:	2100      	movs	r1, #0
 8003764:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	0018      	movs	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	b004      	add	sp, #16
 800376e:	bd80      	pop	{r7, pc}
 8003770:	f1ffffff 	.word	0xf1ffffff

08003774 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003780:	2b00      	cmp	r3, #0
 8003782:	d108      	bne.n	8003796 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	226a      	movs	r2, #106	; 0x6a
 8003788:	2101      	movs	r1, #1
 800378a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2268      	movs	r2, #104	; 0x68
 8003790:	2101      	movs	r1, #1
 8003792:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003794:	e043      	b.n	800381e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003796:	260f      	movs	r6, #15
 8003798:	19bb      	adds	r3, r7, r6
 800379a:	2208      	movs	r2, #8
 800379c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800379e:	200e      	movs	r0, #14
 80037a0:	183b      	adds	r3, r7, r0
 80037a2:	2208      	movs	r2, #8
 80037a4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	0e5b      	lsrs	r3, r3, #25
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	240d      	movs	r4, #13
 80037b2:	193b      	adds	r3, r7, r4
 80037b4:	2107      	movs	r1, #7
 80037b6:	400a      	ands	r2, r1
 80037b8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	0f5b      	lsrs	r3, r3, #29
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	250c      	movs	r5, #12
 80037c6:	197b      	adds	r3, r7, r5
 80037c8:	2107      	movs	r1, #7
 80037ca:	400a      	ands	r2, r1
 80037cc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037ce:	183b      	adds	r3, r7, r0
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	197a      	adds	r2, r7, r5
 80037d4:	7812      	ldrb	r2, [r2, #0]
 80037d6:	4914      	ldr	r1, [pc, #80]	; (8003828 <UARTEx_SetNbDataToProcess+0xb4>)
 80037d8:	5c8a      	ldrb	r2, [r1, r2]
 80037da:	435a      	muls	r2, r3
 80037dc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80037de:	197b      	adds	r3, r7, r5
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	4a12      	ldr	r2, [pc, #72]	; (800382c <UARTEx_SetNbDataToProcess+0xb8>)
 80037e4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037e6:	0019      	movs	r1, r3
 80037e8:	f7fc fd1e 	bl	8000228 <__divsi3>
 80037ec:	0003      	movs	r3, r0
 80037ee:	b299      	uxth	r1, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	226a      	movs	r2, #106	; 0x6a
 80037f4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037f6:	19bb      	adds	r3, r7, r6
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	193a      	adds	r2, r7, r4
 80037fc:	7812      	ldrb	r2, [r2, #0]
 80037fe:	490a      	ldr	r1, [pc, #40]	; (8003828 <UARTEx_SetNbDataToProcess+0xb4>)
 8003800:	5c8a      	ldrb	r2, [r1, r2]
 8003802:	435a      	muls	r2, r3
 8003804:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003806:	193b      	adds	r3, r7, r4
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	4a08      	ldr	r2, [pc, #32]	; (800382c <UARTEx_SetNbDataToProcess+0xb8>)
 800380c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800380e:	0019      	movs	r1, r3
 8003810:	f7fc fd0a 	bl	8000228 <__divsi3>
 8003814:	0003      	movs	r3, r0
 8003816:	b299      	uxth	r1, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2268      	movs	r2, #104	; 0x68
 800381c:	5299      	strh	r1, [r3, r2]
}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b005      	add	sp, #20
 8003824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	08003918 	.word	0x08003918
 800382c:	08003920 	.word	0x08003920

08003830 <__libc_init_array>:
 8003830:	b570      	push	{r4, r5, r6, lr}
 8003832:	2600      	movs	r6, #0
 8003834:	4d0c      	ldr	r5, [pc, #48]	; (8003868 <__libc_init_array+0x38>)
 8003836:	4c0d      	ldr	r4, [pc, #52]	; (800386c <__libc_init_array+0x3c>)
 8003838:	1b64      	subs	r4, r4, r5
 800383a:	10a4      	asrs	r4, r4, #2
 800383c:	42a6      	cmp	r6, r4
 800383e:	d109      	bne.n	8003854 <__libc_init_array+0x24>
 8003840:	2600      	movs	r6, #0
 8003842:	f000 f821 	bl	8003888 <_init>
 8003846:	4d0a      	ldr	r5, [pc, #40]	; (8003870 <__libc_init_array+0x40>)
 8003848:	4c0a      	ldr	r4, [pc, #40]	; (8003874 <__libc_init_array+0x44>)
 800384a:	1b64      	subs	r4, r4, r5
 800384c:	10a4      	asrs	r4, r4, #2
 800384e:	42a6      	cmp	r6, r4
 8003850:	d105      	bne.n	800385e <__libc_init_array+0x2e>
 8003852:	bd70      	pop	{r4, r5, r6, pc}
 8003854:	00b3      	lsls	r3, r6, #2
 8003856:	58eb      	ldr	r3, [r5, r3]
 8003858:	4798      	blx	r3
 800385a:	3601      	adds	r6, #1
 800385c:	e7ee      	b.n	800383c <__libc_init_array+0xc>
 800385e:	00b3      	lsls	r3, r6, #2
 8003860:	58eb      	ldr	r3, [r5, r3]
 8003862:	4798      	blx	r3
 8003864:	3601      	adds	r6, #1
 8003866:	e7f2      	b.n	800384e <__libc_init_array+0x1e>
 8003868:	08003930 	.word	0x08003930
 800386c:	08003930 	.word	0x08003930
 8003870:	08003930 	.word	0x08003930
 8003874:	08003934 	.word	0x08003934

08003878 <memset>:
 8003878:	0003      	movs	r3, r0
 800387a:	1882      	adds	r2, r0, r2
 800387c:	4293      	cmp	r3, r2
 800387e:	d100      	bne.n	8003882 <memset+0xa>
 8003880:	4770      	bx	lr
 8003882:	7019      	strb	r1, [r3, #0]
 8003884:	3301      	adds	r3, #1
 8003886:	e7f9      	b.n	800387c <memset+0x4>

08003888 <_init>:
 8003888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388e:	bc08      	pop	{r3}
 8003890:	469e      	mov	lr, r3
 8003892:	4770      	bx	lr

08003894 <_fini>:
 8003894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800389a:	bc08      	pop	{r3}
 800389c:	469e      	mov	lr, r3
 800389e:	4770      	bx	lr
